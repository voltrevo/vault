import ./util.vx;

cards := [
  { name: 'A', values: [1, 11] },
  { name: '2', values: [2] },
  { name: '3', values: [3] },
  { name: '4', values: [4] },
  { name: '5', values: [5] },
  { name: '6', values: [6] },
  { name: '7', values: [7] },
  { name: '8', values: [8] },
  { name: '9', values: [9] },
  { name: '10', values: [10] },
  { name: 'J', values: [10] },
  { name: 'Q', values: [10] },
  { name: 'K', values: [10] },
];

suits := ['♠', '♥', '♦', '♣'];

fullDeck := (func() {
  res := [];

  for (suit of suits) {
    for (card of cards) {
      res ++= [card ++ {suit}];
    }
  }

  return res;
})();

func scoreHand(hand) {
  possibleScores := [0];

  for (card of hand) {
    newScores := [];

    for (value of card.values) {
      newScores ++= possibleScores:map(func(s) => s + value);
    }

    possibleScores = newScores;
  }

  possibleScores = possibleScores:filter(func(score) => score <= 21);

  return possibleScores:reduceFrom(100, BestScore);
};

func BestScore(s1, s2) {
  [min, max] := util.MinMax(s1, s2);

  if (max == 100) {
    return min;
  }

  return max;
};

func WinLossTie(playerHand, dealerHand) {
  playerScore := scoreHand(playerHand);

  if (playerScore == 100) {
    return 'loss';
  }

  dealerScore := scoreHand(dealerHand);

  if (dealerScore == 100) {
    return 'win';
  }

  if (playerScore == dealerScore) {
    return 'tie';
  }

  if (playerScore > dealerScore) {
    return 'win';
  }

  return 'loss';
};

func Init(seed) {
  rand := util.iterateRand(seed + 0.1237892);

  deck := null;
  [deck, rand] = util.shuffle(rand, fullDeck);

  playerHand := [];
  dealerHand := [];

  for (i := 0; i < 2; i++) {
    playerHand ++= [deck:Front()];
    deck = deck:Tail();

    dealerHand ++= [deck:Front()];
    deck = deck:Tail();
  }

  return {
    rand,
    deck,
    account: 100,
    bet: 10,
    playerHand,
    dealerHand,
    options: ['hit', 'stand', 'double'],
  };
};

func apply(action) => switch (action) {
  'hit' => func(state) {
    state.playerHand ++= [state.deck:Front()];
    state.deck = state.deck:Tail();

    state.options = switch {
      (scoreHand(state.playerHand) >= 21) => ['stand'];
      true => ['hit', 'stand'];
    };

    return state;
  };

  'stand' => func(state) {
    for (scoreHand(state.dealerHand) < 16) {
      state.dealerHand ++= [state.deck:Front()];
      state.deck = state.deck:Tail();
    }

    state.account += switch (WinLossTie(state.playerHand, state.dealerHand)) {
      'win' => state.bet;
      'loss' => -state.bet;
      'tie' => 0;
    };

    state.options = [];

    if (state.account >= 10) {
      state.options ++= ['next'];
    }

    return state;
  };

  'double' => func(state) {
    state.bet *= 2;
    state.options = ['hit', 'stand'];

    return state;
  };

  'next' => func(state) {
    account := state.account;
    state = Init(state.rand);
    state.account = account;

    return state;
  };
};

func findOption(options, input) {
  if (input == '') {
    if (options:Length() > 0) {
      return options:Front();
    }

    return null;
  }

  exactMatch := null;
  firstCharMatches := [];

  for (op of options) {
    if (input == op) {
      exactMatch = op;
      break;
    }

    if (input[0] == op[0]) {
      firstCharMatches ++= [op];
    }
  }

  return switch {
    (exactMatch:String() != 'null') => exactMatch;
    (firstCharMatches:Length() > 0) => firstCharMatches:Front();
    true => null;
  };
};

func reduce(state, action) {
  if (state:String() == 'null') {
    return Init(action);
  }

  match := findOption(state.options, action);

  if (match:String() == 'null') {
    return state;
  }

  state = apply(match)(state);

  return state;
};

return {Init, reduce, scoreHand, WinLossTie};
