import p from '@/util/parse.vx';

import @/parser/AppendPos.vx;

import ./Atomic.vx;
import ./Function.vx;
import ./Suffix.vx;
import ./Switch.vx;

Access := p.Transform(
  p.Sequence([
    Atomic,
    p.Many(Suffix),
  ]),
  func([exp, suffixes]) {
    for ([op, rhs, pos] of suffixes) {
      exp = [op, [exp, rhs], pos];
    }

    return exp;
  },
);

return p.Select([
  AppendPos(Function),
  AppendPos(Switch),
  Access,
]);
