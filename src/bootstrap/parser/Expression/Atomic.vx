import p from '@/util/parse.vx';

import @/parser/AppendPos.vx;
import @/parser/Identifier.vx;
import @/parser/Primitive/Number.vx;
import @/parser/Primitive/String.vx;
import @/parser/W.vx;

import ./Array.vx;
import ./DeferExpression.vx;
import ./Import.vx;
import ./Object.vx;
import ./Set.vx;

ParenExp := p.SequenceOne([
  [p.Exact('(')],
  [W.Optional],
  p.Select([
    AppendPos(Import),
    DeferExpression,
  ]),
  [W.Optional],
  [p.Exact(')')],
]);

return p.Select([
  AppendPos(p.Select([
    // Identifiers are the most common match and easy to parse, so they come
    // first, just need to convert the ones that overlap with primitives into
    // primitives (literals)
    p.Transform(Identifier, func(ident) => switch (ident[1]) {
      'null' => ['literal', null];
      'true' => ['literal', true];
      'false' => ['literal', false];
      default => ident;
    }),

    // Primitives not covered by identifier-like cases above
    Number,
    String,

    Array,
    Set,
    Object,
  ])),
  ParenExp,
]);
