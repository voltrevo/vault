import p from '@/util/parse.vx';

import @/parser/Identifier.vx;
import @/parser/Primitive/Primitive.vx;

import ./Array.vx;
import ./DeferExpression.vx;
import ./Function.vx;
import ./Import.vx;
import ./Object.vx;
import ./Set.vx;
import ./Suffix.vx;

ParenExp := p.SequenceOne([
  [p.Exact('(')],
  [p.OW],
  p.Select([
    Import,
    DeferExpression,
  ]),
  [p.OW],
  [p.Exact(')')],
]);

AtomicExp := p.Select([
  Primitive,
  Identifier,
  Array,
  Set,
  Object,
  ParenExp,
]);

Access := p.Transform(
  p.Sequence([
    AtomicExp,
    p.Many(Suffix),
  ]),
  func([exp, suffixes]) {
    for ([op, rhs] of suffixes) {
      exp = [op, [exp, rhs]];
    }

    return exp;
  },
);

return p.Select([Function, Access]);
