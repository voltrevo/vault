import p from '@/util/parse.vx';

import @/util/SetFromArray.vx;

assignment := #[
  ':=', '=', '**=', '+=', '++=', '-=', '*=', '/=', '%=', '<<=', '>>=', '&=',
  '|=', '^=', '&&=', '||=', '~='
];

prefix := #['!', '~', '+', '-'];
postfix := #['++', '--'];

precedenceList := [
  ['right', ['**']],
  ['left', ['*', '/', '%']],
  ['left', ['++', '+', '-']],
  ['left', ['<<', '>>']],
  ['left', ['<=', '>=', '<', '>']],
  ['left', ['==', '!=']],
  ['left', ['~']],
  ['left', ['&']],
  ['left', ['^']],
  ['left', ['|']],
  ['left', ['&&']],
  ['left', ['||']],
  ['left', ['in']],
  ['right', assignment:Values()],
];

// It's important that longer operators always come first so that it is always
// parsed preferentially rather than a shorter one which happens to be a prefix
// Note: . and : are processed as suffixes rather than operators
allExceptIn := [
  '==', '!=',

  ':=', '=', '**=', '+=', '++=', '-=', '*=', '/=', '%=', '<<=', '>>=', '&=',
  '|=', '^=', '&&=', '||=', '~=',

  '++', '--',
  '!', '~',

  '**',
  '*', '/', '%',
  '++', '+', '-',
  '<<', '>>',
  '<=', '>=', '<', '>',
  '~',
  '^',
  '&&',
  '&',
  '||',
  '|',
];

all := allExceptIn ++ ['in'];

allSet := SetFromArray(all);

precedenceOps := precedenceList:map(func([_, ops]) => ops):reduce(++);

assert (
  (
    prefix |
    postfix |
    SetFromArray(precedenceOps)
  ) ==
  SetFromArray(all)
);

parseIn := (func() {
  identChar := p.Filter(p.Char, func(c) => (
    ('a' <= c && c <= 'z') ||
    ('A' <= c && c <= 'Z') ||
    c == '_'
  ));

  return p.SequenceOne([p.Exact('in'), [p.Peek(p.Not(identChar))]]);
})();

return {
  all: allSet,
  assignment,
  prefix,
  postfix,
  precedenceList,
  Operator: p.Select([
    p.SelectExact(allExceptIn),
    parseIn,
  ]),
  LeadingOperator: p.SelectExact(prefix:Values()),
  TrailingOperator: p.SelectExact(postfix:Values()),
};
