import ct from '@/util/canvasTree.vx';
import t2 from '@/util/transform2d.vx';

textScale := 0.7;
uiHeight := 0.2;

func Header(text) => ct.Box({
  width: 1,
  height: uiHeight,
  text: {
    content: text,
    color: 'white',
    scale: textScale,
  },
  style: {
    fill: 'black',
  },
});

func Body(text) => ct.Transform(
  t2.Translation([[0], [uiHeight]]),
  ct.Box({
    width: 1,
    height: 1 - 2 * uiHeight,
    text: {
      content: text,
      color: 'white',
      scale: textScale,
    },
  }),
);

func Footer(buttons) {
  elements := [];

  w := 1 / buttons:Length();

  for ([i, {text, color, click}] of buttons:Entries()) {
    elements ++= [
      ct.Transform(
        t2.Translation([[i * w], [1 - uiHeight]]),
        ct.Box({
          width: w,
          height: uiHeight,
          text: {
            content: text,
            color: 'white',
            scale: textScale,
          },
          style: {
            fill: color,
          },
          click,
        }),
      ),
    ];
  }

  return ct.Group(elements);
};

return ct.App({
  init: 0,
  reduce: func(state, [type, event]) {
    assert type == 'boxClick';
    return state + event.data;
  },
  render: func(state) => {
    events: [],
    tree: ct.Group([
      Header('Counter'),
      Body(state:String()),
      Footer([
        {text: '-', color: 'red', click: -1},
        {text: '+', color: 'green', click: 1},
      ]),
    ]),
  },
});
