import p from '@/util/parse.vx';

import @/parser/Expression/Expression.vx;

import ./BraceBlock.vx;

Condition := p.Transform(
  p.SequenceOne([
    [p.Exact('(')],
    [p.OW],
    Expression,
    [p.OW],
    [p.Exact(')')],
  ]),
  func(condition) => ['condition', condition],
);

Traditional := p.Transform(
  p.Sequence([
    [p.Exact('(')],
    [p.OW],
    Expression,
    [p.OW],
    [p.Exact(';')],
    [p.OW],
    Expression,
    [p.OW],
    [p.Exact(';')],
    [p.OW],
    Expression,
    [p.OW],
    [p.Exact(')')],
  ]),
  func([setup, condition, next]) => ['traditional', {setup, condition, next}]
);

Range := p.Transform(
  p.Sequence([
    [p.Exact('(')],
    [p.OW],
    Expression,
    [p.Whitespace],
    [p.Exact('of')],
    [p.Whitespace],
    Expression,
    [p.OW],
    [p.Exact(')')],
  ]),
  func([element, container]) => ['range', {element, container}],
);

ControlClause := p.Select([
  Condition,
  Traditional,
  Range,
  p.Nothing,
]);

For := p.Transform(
  p.Sequence([
    [p.Exact('for')],
    [p.OW],
    ControlClause,
    [p.OW],
    BraceBlock,
  ]),
  func([control, body]) => ['for', {control, body}],
);

return For;
