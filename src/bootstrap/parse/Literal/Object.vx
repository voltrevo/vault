import @/parse/CommaSequence.vx;
import @/parse/Identifier.vx;
import p from '@/parse/parse.vx';
import @/parse/Whitespace.vx;

import ./DeferLiteral.vx;
import ./String.vx;

OW := p.Optional(Whitespace);
Colon := p.Exact(':');

Key := p.DataPos(p.Select([Identifier, String]));

KeyValuePair := p.Transform(
  p.Sequence([Key, OW, Colon, OW, DeferLiteral]),
  func([key, _, _, _, [_, value]]) => ['kvp', [key, value]],
);

RawObject := p.Sequence([
  p.Exact('{'),
  CommaSequence(KeyValuePair),
  p.Exact('}'),
]);

Object := p.Transform(
  RawObject,
  func([_, pairs, _]) {
    res := {};

    for ([{data: [_, key], pos}, value] of pairs) {
      if (key in res:Keys()) {
        return [
          'invalid',
          'object has duplicate key \'' ++ key ++ '\' at ' ++ pos:String(),
        ];
      }

      res[key] := value;
    }

    return ['literal', res];
  },
);

return Object;
