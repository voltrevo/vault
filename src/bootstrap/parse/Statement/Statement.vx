import p from '@/parse/parse.vx';

import @/parse/Expression/Expression.vx;

import ./If.vx;
import ./For.vx;

func ExactStatement(str) => p.Transform(
  p.Exact(str),
  func(_) => [str, null],
);

ExpStatement := p.Transform(
  p.Sequence([
    p.Optional(p.SequenceOne([
      p.Exact('return'),
      [p.Whitespace],
    ])),
    Expression,
  ]),
  func([maybeReturn, exp]) {
    if (maybeReturn:Length() == 0u64) {
      return ['expression', exp];
    }

    assert maybeReturn == ['return'];

    return ['return', exp];
  },
);

SemiStatement := p.Select([
  ExactStatement('break'),
  ExactStatement('continue'),
  ExpStatement,
]);

Statement := p.Select([
  If,
  For,
  p.SequenceOne([
    SemiStatement,
    [p.OW],
    [p.Exact(';')],
  ]),
]);

return Statement;
