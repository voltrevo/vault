import ./parse.vx;
import ./Number.vx;

// TODO: {a, b, ...} := rhs
Many := parse.Many;
Select := parse.Select;
Complete := parse.Complete;

Program := Complete(
  Many(Select([
    Number,
    Whitespace,
    Fail,
  ]))
);

func Whitespace(lines, [i, j]) {
  empty := true;

  if (i >= lines:Length()) {
    return null;
  }

  line := lines[i];

  for {
    for (j >= line:Length()) {
      empty = false;
      i++;
      j = 0u64;

      if (i >= lines:Length()) {
        return [['whitespace'], [i, j]];
      }

      line = lines[i];
    }

    if (!isWhitespace(line[j])) {
      return switch (empty) {
        true => null;
        false => [['whitespace'], [i, j]];
      };
    }

    empty = false;
    j++;
  }
};

func Fail(lines, [i, j]) {
  if (i >= lines:Length()) {
    return null;
  }

  line := lines[i];

  if (j < line:Length()) {
    j++;

    if (j == line:Length()) {
      i++;
      j = 0u64;
    }

    return [['fail'], [i, j]];
  }

  i++;
  j = 0u64;

  return [['fail'], [i, j]];
};

func isWhitespace(s) => switch {
  (s == ' ') => true;
  (s == '	') => true; // TODO: \t escape sequence (and others)

  true => false;
};

sampleLines := [
  '123u64 ',
  '',
  '500u8',
  ' ',
  '  321u64 ',
];

program := Program(sampleLines);

if (0u8:String() == '0u8') {
  assert Program(['13i8']) == [
    {data: ['literal', 13i8], pos: [[0u64, 0u64], [0u64, 4u64]]},
    {data: ['whitespace'], pos: [[0u64, 4u64], [1u64, 0u64]]},
  ];

  assert program == [
    {data: ['literal', 123u64], pos: [[0u64, 0u64], [0u64, 6u64]]},
    {data: ['whitespace'], pos: [[0u64, 6u64], [2u64, 0u64]]},
    {data: ['overflow'], pos: [[2u64, 0u64], [2u64, 5u64]]},
    {data: ['whitespace'], pos: [[2u64, 5u64], [4u64, 2u64]]},
    {data: ['literal', 321u64], pos: [[4u64, 2u64], [4u64, 8u64]]},
    {data: ['whitespace'], pos: [[4u64, 8u64], [5u64, 0u64]]},
  ];
}

return Program;
