import p from '@/util/parse.vx';

import @/parser/AppendPos.vx;
import @/parser/Identifier.vx;
import @/parser/Primitive/String.vx;
import @/parser/W.vx;

Dir := p.Transform(
  p.SequenceOne([
    p.Many(
      p.Filter(p.Char, func(c) => !(c in #['/', '(', ')', ';'])),
    ),
    [p.Exact('/')],
  ]),
  func(charArray) => (charArray ++ ['/']):reduce(++),
);

return p.SequenceOne([
  [p.Exact('import')],
  [W.Space],
  p.Select([
    p.Transform(
      p.Sequence([
        AppendPos(Identifier),
        [W.Space],
        [p.Exact('from')],
        [W.Optional],
        String,
      ]),
      func([name, [_, source]]) => ['import', {name, source}],
    ),
    p.Transform(
      p.Sequence([
        Dir,
        p.Many(Dir),
        AppendPos(Identifier),
        [p.Exact('.vx')],
      ]),
      func([firstDir, dirs, name]) => ['import', {
        name,
        source: ([firstDir] ++ dirs):reduce(++) ++ name[1] ++ '.vx',
      }]
    ),
  ]),
]);
