import ct from '@/util/canvasTree.vx';
import t2 from '@/util/transform2d.vx';
import @/util/trig.vx;

init := {time: 0, angle: 0, boxClicks: []};

reducers := {
  frame: func(state, frame) {
    state.time += frame.dt;
    state.angle += 0.001 + trig.sin(2 * state.angle) ** 2 * frame.dt;

    return state;
  },

  boxClick: func(state, boxClick) {
    state.boxClicks ++= [boxClick];
    return state;
  },
};

func reduce(state, [actionType, actionData]) => (
  reducers[actionType](state, actionData)
);

unitSquare := ct.Poly({
  points: [
    [-0.5, -0.5],
    [0.5, -0.5],
    [0.5, 0.5],
    [-0.5, 0.5],
    [-0.5, -0.5],
  ],
  style: {stroke: {color: 'white'}},
});

func Col(x, y) => [[x], [y]];

func RotateIn(angle) {
  angle = angle % (trig.tau / 4);

  return t2.compose(
    t2.Rotation(angle),
    t2.Scale(1 / (trig.sin(angle) + trig.cos(angle))),
  );
};

func render(state) {
  tree := ct.Transform(
    t2.Translation([[-0.5], [-0.5]]),
    ct.Box({
      width: 1,
      height: 1,
      text: {
        content: 'Vortex',
        color: '#6644ff',
        scale: 0.8,
      },
      style: {
        stroke: {color: 'white'},
      },
      click: {foo: 'bar'},
    }),
  );

  rotateIn := RotateIn(state.angle);

  for (i := 0; i < 8; i++) {
    tree = ct.Group([unitSquare, ct.Transform(rotateIn, tree)]);
  }

  tree = ct.Transform(t2.Translation(Col(0.5, 0.5)), tree);

  return {
    events: ['frame'],
    tree,
  };
};

return ct.App({init, reduce, render});
