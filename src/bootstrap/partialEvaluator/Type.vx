import @/util/kinds.vx;
import @/util/mapValues.vx;
import @/util/Join.vx;

import ./Type.vx;

return {
  String: func([cat, data]) => switch (cat) {
    'literal' => data:String();

    'kinds' => switch {
      (data:Values():Length() == 1u64) => data:Values()[0];
      (data == kinds.all) => 'any';
      default => '(' ++ Join(' | ')(data:Values()) ++ ')';
    };

    'array' => '[' ++ Join(', ')(data:map(Type.String)) ++ ']';
    'array-uniform' => Type.String(data) ++ '[]';
    'set' => Type.String(data) ++ '#[]';

    'object' => (
      '{' ++
      Join(', ')(data
        :Entries()
        :map(func([key, keyData]) => key ++ ': ' ++ Type.String(keyData))
      ) ++
      '}'
    );

    'func' => (
      'func(' ++
      Join(', ')(data.args:map(Type.String)) ++
      ')' ++
      Type.String(data.output)
    );

    'never' => 'never';
  },

  Kinds: func([cat, data]) => switch (cat) {
    'literal' => #[data:Kind()];
    'kinds' => data;
    'array' => #['array'];
    'array-uniform' => #['array'];
    'set' => #['set'];
    'object' => #['object'];
    'func' => #['func'];
    'hoist' => #['func'];
    'never' => #[];
  },

  Union: func(typeA, typeB) {
    if (typeA in #[typeB]) {
      return typeA;
    }

    if (typeA[0] == 'never') {
      return typeB;
    }

    if (typeB[0] == 'never') {
      return typeA;
    }

    cats := #[typeA[0], typeB[0]];

    if ('kinds' in cats) {
      return ['kinds', Type.Kinds(typeA) | Type.Kinds(typeB)];
    }

    if ('literal' in cats) {
      [typeLiteral, typeOther] := switch (typeA[0]) {
        'literal' => [typeA, typeB];
        default => [typeB, typeA];
      };

      if (typeOther[0] == 'literal') {
        if (typeA[1]:Kind() != typeB[1]:Kind()) {
          return ['kinds', #[typeA[1]:Kind(), typeB[1]:Kind()]];
        }

        sameKind := typeA[1]:Kind();

        if (!(sameKind in #['array', 'set', 'object', 'func'])) {
          assert typeA[1] != typeB[1]; // Should be handled earlier
          return ['kinds', #[sameKind]];
        }

        if (sameKind == 'array') {
          if (typeA[1]:Length() != typeB[1]:Length()) {
            return [
              'array-uniform',
              ((typeA[1] ++ typeB[1])
                :map(func(v) => ['literal', v])
                :reduce(Type.Union)
              ),
            ];
          }

          if (typeA[0] == 'literal') {
            typeA = Type.demoteArrayLiteral(typeA);
          }

          if (typeB[0] == 'literal') {
            typeB = Type.demoteArrayLiteral(typeB);
          }

          return [
            'array',
            ([typeA[1], typeB[1]]
              :Transpose()
              :map(func([left, right]) => Type.Union(left, right))
            ),
          ];
        }

        if (sameKind == 'set') {
          return [
            'set',
            ((typeA[1] | typeB[1])
              :Values()
              :map(func(v) => ['literal', v])
              :reduce(Type.Union)
            ),
          ];
        }

        if (sameKind == 'object') {
          if (typeA[1]:Keys() != typeB[1]:Keys()) {
            return ['kinds', #['object']];
          }

          newData := {};

          for (key of typeA[1]:Keys():Values()) {
            newData[key] := Type.Union(typeA[1][key], typeB[1][key]);
          }

          return ['object', newData];
        }
      }

      if (typeOther[0] == 'kinds') {
        return ['kinds', Type.Kinds(typeLiteral) | typeOther[1]];
      }

      if (typeOther[0] == 'array') {
        if (typeLiteral[1]:Kind() != 'array') {
          return ['kinds', #['array', typeLiteral[1]:Kind()]];
        }

        if (typeLiteral[1]:Length() != typeOther[1]:Length()) {
          return [
            'array-uniform',
            (
              typeLiteral:map(func(v) => ['literal', v]) ++
              typeOther[1]
            ):reduce(Type.Union),
          ];
        }

        return [
          'array',
          ([typeLiteral[1], typeOther[1]]
            :Transpose()
            :map(func([left, right]) => Type.Union(['literal', left], right))
          ),
        ];
      }

      if (typeOther[0] == 'array-uniform') {
        if (typeLiteral[1]:Kind() != 'array') {
          return ['kinds', #['array', typeLiteral[1]:Kind()]];
        }

        return [
          'array-uniform',
          (
            typeLiteral:map(func(v) => ['literal', v]) ++
            [typeOther[1]]
          ):reduce(Type.Union),
        ];
      }

      if (typeOther[0] == 'set') {
        if (typeLiteral[1]:Kind() != 'set') {
          return ['kinds', #['set', typeLiteral[1]:Kind()]];
        }

        return [
          'set',
          (
            typeLiteral[1]:Values():map(func(v) => ['literal', v]) ++
            [typeOther[1]]
          ):reduce(Type.Union)
        ];
      }

      if (typeOther[0] == 'object') {
        if (typeLiteral[1]:Kind() != 'object') {
          return ['kinds', #['object', typeLiteral[1]:Kind()]];
        }

        if (typeLiteral[1]:Keys() != typeOther[1]:Keys()) {
          return ['kinds', #['object']];
        }

        newData := {};

        for (key of typeLiteral[1]:Keys():Values()) {
          newData[key] := Type.Union(
            ['literal', typeLiteral[1][key]],
            typeOther[1][key],
          );
        }

        return ['object', newData];
      }

      if (typeOther[0] == 'func') {
        return ['kinds', #['func', typeLiteral[1]:Kind()]];
      }

      assert false;
      return null;
    }

    if ((cats & #['array', 'array-uniform']) != #[]) {
      if ((cats & #['set', 'object', 'func']) != #[]) {
        return ['kinds', Type.Kinds(typeA) | Type.Kinds(typeB)];
      }

      if (typeA[0] == 'array' && typeB[0] == 'array') {
        if (typeA[1]:Length() == typeB[1]:Length()) {
          return [
            'array',
            ([typeA[1], typeB[1]]
              :Transpose()
              :map(func([left, right]) => Type.Union(left, right))
            ),
          ];
        }
      }

      if (typeA[0] == 'array') {
        typeA = ['array-uniform', typeA[1]:reduce(Type.Union)];
      }

      if (typeB[0] == 'array') {
        typeB = ['array-uniform', typeB[1]:reduce(Type.Union)];
      }

      assert #[typeA[0], typeB[0]] == #['array-uniform'];

      return ['array-uniform', Type.Union(typeA[1], typeB[1])];
    }

    if (typeA[0] != typeB[0]) {
      return ['kinds', Type.Kinds(typeA) | Type.Kinds(typeB)];
    }

    sameCat := typeA[0];

    if (sameCat == 'set') {
      return ['set', Type.Union(typeA[1], typeB[1])];
    }

    if (sameCat == 'object') {
      if (typeA[1]:Keys() != typeB[1]:Keys()) {
        return ['kinds', #['object']];
      }

      newData := {};

      for (key of typeA[1]:Keys():Values()) {
        newData[key] := Type.Union(typeA[1][key], typeB[1][key]);
      }

      return ['object', newData];
    }

    if (sameCat == 'func') {
      if (typeA[1].args:Length() != typeB[1].args:Length()) {
        return ['kinds', #['func']];
      }

      return ['func', {
        args: ([typeA[1].args, typeB[1].args]
          :Transpose()
          :map(func([left, right]) => Type.Union(left, right))
        ),
        output: Type.Union(typeA[1].output, typeB[1].output),
      }];
    }

    assert false;
    return null;
  },

  Intersection: func(typeA, typeB) {
    if (typeA in #[typeB]) {
      return typeA;
    }

    cats := #[typeA[0], typeB[0]];

    if ('never' in cats) {
      return ['never', null];
    }

    if ('kinds' in cats) {
      if (typeA[0] == typeB[0]) {
        newKinds := typeA[1] & typeB[1];

        if (newKinds == #[]) {
          return ['never', null];
        }

        return ['kinds', newKinds];
      }

      [typeKinds, typeOther] := switch (typeA[0]) {
        'kinds' => [typeA, typeB];
        default => [typeB, typeA];
      };

      if ((Type.Kinds(typeOther) & typeKinds[1]) == #[]) {
        return ['never', null];
      }

      return typeOther;
    }

    if (typeA[0] == typeB[0]) {
      cat := typeA[0];

      if (cat == 'literal') {
        return ['never', null]; // Same value caught earlier
      }

      if (cat == 'array') {
        if (typeA[1]:Length() != typeB[1]:Length()) {
          return ['never', null];
        }

        newData := [];

        for ([left, right] of [typeA[1], typeB[1]]:Transpose()) {
          subType := Type.Intersection(left, right);

          if (subType[0] == 'never') {
            return ['never', null];
          }

          newData ++= [subType];
        }

        return ['array', newData];
      }

      if (cat in #['array-uniform', 'set']) {
        uniformType := Type.Intersection(typeA[1], typeB[1]);

        if (uniformType[0] == 'never') {
          return ['never', null];
        }

        return [cat, uniformType];
      }

      if (cat == 'object') {
        if (typeA[1]:Keys() != typeB[1]:Keys()) {
          return ['never', null];
        }

        newData := {};

        for (key of typeA[1]:Keys():Values()) {
          subType := Type.Intersection(typeA[1][key], typeB[1][key]);

          if (subType[0] == 'never') {
            return ['never', null];
          }

          newData[key] := subType;
        }

        return ['object', newData];
      }

      if (cat == 'func') {
        outputType := Type.Intersection(typeA[1].output, typeB[1].output);

        if (outputType[0] == 'never') {
          return ['never', null];
        }

        if (typeA[1].args:Length() != typeB[1].args:Length()) {
          return ['never', null];
        }

        argTypes := [];

        for (i := 0u64; i < typeA[1].args:Length(); i++) {
          argType := Type.Intersection(typeA[1].args[i], typeB[1].args[i]);

          if (argType[0] == 'never') {
            return ['never', null];
          }

          argType ++= [argType];
        }

        return ['func', {
          args: argTypes,
          output: outputType,
        }];
      }

      assert false;
    }

    if ('literal' in cats) {
      [typeLiteral, typeOther] := switch (typeA[0]) {
        'literal' => [typeA, typeB];
        default =>  [typeB, typeA];
      };

      if (!(typeLiteral[1]:Kind() in Type.Kinds(typeOther))) {
        return ['never', null];
      }

      if (typeOther[0] == 'kinds') {
        return typeLiteral;
      }

      if (typeOther[0] == 'array') {
        if (typeLiteral[1]:Length() != typeOther[1]:Length()) {
          return ['never', null];
        }

        for (i := 0u64; i < typeLiteral[1]:Length(); i++) {
          elType := Type.Intersection(['literal', typeLiteral[1][i]], typeOther[1][i]);

          if (elType[0] == 'never') {
            return ['never', null];
          }
        }

        return typeLiteral;
      }

      if (typeOther[0] == 'array-uniform') {
        for (el of typeLiteral[1]) {
          elType := Type.Intersection(['literal', el], typeOther[1]);

          if (elType[0] == 'never') {
            return ['never', null];
          }
        }

        return typeLiteral;
      }

      if (typeOther[0] == 'set') {
        for (el of typeLiteral[1]:Values()) {
          elType := Type.Intersection(['literal', el], typeOther[1]);

          if (elType[0] == 'never') {
            return ['never', null];
          }
        }

        return typeLiteral;
      }

      if (typeOther[0] == 'object') {
        if (typeLiteral[1]:Keys() != typeOther[1]:Keys()) {
          return ['never', null];
        }

        for (key of typeLiteral[1]:Keys():Values()) {
          elType := Type.Intersection(
            ['literal', typeLiteral[1][key]],
            typeOther[1][key],
          );

          if (elType[0] == 'never') {
            return ['never', null];
          }
        }

        return typeLiteral;
      }

      if (typeOther[0] == 'func') {
        return ['never', null];
      }

      assert false;
    }

    if ((cats ~ #['array', 'array-uniform']) == #[]) {
      if ((cats & #['set', 'object', 'func']) != #[]) {
        return ['never', null];
      }

      [typeArray, typeUniform] := switch ([typeA[0], typeB[0]]) {
        ['array', 'array-uniform'] => [typeA, typeB];
        ['array-uniform', 'array'] => [typeB, typeA];
      };

      newTypes := [];

      for (elType of typeArray[1]) {
        newElType := Type.Intersection(elType, typeUniform[1]);

        if (newElType[0] == 'never') {
          return ['never', null];
        }

        newTypes ++= [newElType];
      }

      return ['array', newTypes];
    }

    assert (cats ~ #['set', 'object', 'func']) == #[];

    return ['never', null];
  },

  Literal: func(value) => ['literal', value],

  demoteArrayLiteral: func(type) {
    return ['array', type[1]:map(Type.Literal)];
  },

  demoteObjectLiteral: func(type) => [
    'object',
    mapValues(type[1], Type.Literal),
  ],

  Shape: func([cat, data]) => switch (cat) {
    'literal' => switch (data:Kind()) {
      'array' => ['array', data:map(Type.Literal):map(Type.Shape)];

      'set' => ['kinds', #['set']];

      'object' => ['object', mapValues(data, Type.Shape)];

      default => ['kinds', #[data:Kind()]];
    };

    'kinds' => [cat, data];
    'array' => ['array', data:map(Type.Shape)];
    'array-uniform' => ['array-uniform', Type.Shape(data)];
    'set' => ['kinds', #['set']];
    'object' => ['object', mapValues(data, Type.Shape)];

    'func' => ['func', {
      args: data.args:map(Type.Shape),
      output: Type.Shape(data.output)
    }];

    'never' => [cat, data];
  },

  ShapeUnion: func(typeA, typeB) {
    // TODO: Decide whether an optimizing this the same way as
    // ShapeIntersection is needed (and whether ShapeIntersection should be
    // just this simple version).
    return Type.Union(Type.Shape(typeA), Type.Shape(typeB));
  },

  ShapeIntersection: func(typeA, typeB) {
    // Equivalent to Type.Intersection(Type.Shape(typeA), Type.Shape(typeB))
    // except that never can have location information

    vectorKinds := (
      #['array', 'object'] &
      Type.Kinds(typeA) &
      Type.Kinds(typeB)
    );

    if (vectorKinds == #[]) {
      // TODO: Optimize more of these cases?
      return Type.Intersection(Type.Shape(typeA), Type.Shape(typeB));
    }

    if ('kinds' in #[typeA[0], typeB[0]]) {
      return Type.Intersection(Type.Shape(typeA), Type.Shape(typeB));
    }

    // The only way there could be multiple shape kinds is if both typeA
    // and typeB were 'kinds', which was handled earlier
    [vectorKind] := vectorKinds:Values();

    if (vectorKind == 'object') {
      aKeys := typeA[1]:Keys();
      bKeys := typeB[1]:Keys();

      if (aKeys != bKeys) {
        return ['never', ['key mismatch']];
      }

      if (typeA[0] == 'literal') {
        typeA = Type.demoteObjectLiteral(typeA);
      }

      if (typeB[0] == 'literal') {
        typeB = Type.demoteObjectLiteral(typeB);
      }

      newData := {};
      entries := [typeA[1], typeB[1]]:Transpose():Entries();

      for ([key, [subTypeA, subTypeB]] of entries) {
        subType := Type.ShapeIntersection(subTypeA, subTypeB);

        if (subType[0] == 'never') {
          return Type.NeverPath(key, subType);
        }

        newData[key] := subType;
      }

      return ['object', newData];
    }

    if (vectorKind == 'array') {
      if ('array-uniform' in #[typeA[0], typeB[0]]) {
        if (typeA[0] == typeB[0]) {
          return ['array-uniform', Type.ShapeIntersection(typeA[1], typeB[1])];
        }

        [typeUniform, typeArray] := switch (typeA[0]) {
          'array-uniform' => [typeA[0], typeB];
          default => [typeB[0], typeA];
        };

        if (typeArray[0] == 'literal') {
          typeArray = Type.demoteArrayLiteral(typeArray);
        }

        newData := [];

        for (i := 0u64; i < typeArray[1]:Length(); i++) {
          subType := Type.ShapeIntersection(typeArray[1][i], typeUniform);

          if (subType[0] == 'never') {
            return Type.NeverPath(i, subType);
          }

          newData ++= [subType];
        }

        return ['array', newData];
      }

      if (typeA[0] == 'literal') {
        typeA = Type.demoteArrayLiteral(typeA);
      }

      if (typeB[0] == 'literal') {
        typeB = Type.demoteArrayLiteral(typeB);
      }

      len := typeA[1]:Length();

      if (typeB[1]:Length() != len) {
        return ['never', null];
      }

      newData := [];

      for (i := 0u64; i < len; i++) {
        subType := Type.ShapeIntersection(typeA[1][i], typeB[1][i]);

        if (subType[0] == 'never') {
          return Type.NeverPath(i, subType);
        }

        newData ++= [subType];
      }

      return ['array', newData];
    }

    assert false;
    return null;
  },

  IntersectKindsDeep: func(type, allowedKinds) {
    kindSet := Type.Kinds(type);
    kindSetAllowed := kindSet & allowedKinds;

    if (kindSetAllowed == #[]) {
      return ['never', ['kind not allowed']];
    }

    // deal with: literal, array, array-uniform, set, object, func

    if (type[0] == 'kinds') {
      return ['kinds', kindSetAllowed];
    }

    [kind] := kindSet:Values();

    if (kind == 'array') {
      if (type[0] == 'array-uniform') {
        uniformType := Type.IntersectKindsDeep(type[1], allowedKinds);

        if (uniformType[0] == 'never') {
          // TODO: Need to re-think many array-uniform cases like this one
          // that actually might be ok due to the empty array possibility.
          return Type.NeverPath('u64', uniformType);
        }

        return ['array-uniform', uniformType];
      }

      typeArray := switch (type[0]) {
        'array' => type;
        'literal' => Type.demoteArrayLiteral(type);
      };

      newData := [];

      for (i := 0u64; i < typeArray[1]:Length(); i++) {
        subType := Type.IntersectKindsDeep(typeArray[1][i], allowedKinds);

        if (subType[0] == 'never') {
          return Type.NeverPath(i, subType);
        }

        newData ++= [subType];
      }

      return switch (type[0]) {
        'array' => ['array', newData];
        'literal' => type;
      };
    }

    if (kind == 'object') {
      typeObject := switch (type[0]) {
        'object' => type;
        'literal' => Type.demoteObjectLiteral(type);
      };

      newData := {};

      for (key of type[1]:Keys():Values()) {
        subType := Type.IntersectKindsDeep(typeObject[1][key], allowedKinds);

        if (subType[0] == 'never') {
          return Type.NeverPath(key, subType);
        }

        newData[key] := subType;
      }

      return switch (type[0]) {
        'object' => ['object', newData];
        'literal' => type;
      };
    }

    if (kind == 'set') {
      if (type[0] == 'literal') {
        for (el of type[1]:Values()) {
          subType := Type.IntersectKindsDeep(['literal', el], allowedKinds);

          if (subType[0] == 'never') {
            return Type.NeverPath('set element', subType);
          }
        }

        return type;
      }

      if (type[0] == 'set') {
        subType := Type.IntersectKindsDeep(type[1], allowedKinds);

        if (subType[0] == 'never') {
          // TODO: Empty set literal instead?
          return Type.NeverPath('set elements', subType);
        }

        return ['set', subType];
      }

      assert false;
      return null;
    }

    if (kind == 'func') {
      assert type[0] == 'func';

      type[1].output = Type.IntersectKindsDeep(type[1].output, allowedKinds);

      if (type[1].output[0] == 'never') {
        return Type.NeverPath('output', type[1].output);
      }

      for (i := 0u64; i < type[1].args:Length(); i++) {
        type[1].args[i] = Type.IntersectKindsDeep(
          type[1].args[i],
          allowedKinds,
        );

        if (type[1].args[i][0] == 'never') {
          return Type.NeverPath('args', Type.NeverPath(i, type[1].args[i]));
        }
      }

      return type;
    }

    return type;
  },

  NeverPath: func(key, typeNever) {
    return ['never', switch (typeNever[1]:Kind()) {
      'null' => [key];
      'array' => [key] ++ typeNever[1];
    }];
  },

  any: ['kinds', kinds.all],
};
