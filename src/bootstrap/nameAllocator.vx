import @/util/Join.vx;
import @/util/str.vx;

func numStr(n) {
  assert n:Kind() == 'u64';
  fullStr := n:String();
  return str.take(fullStr:Length() - 3u64, fullStr);
};

func match(line, pos, matchStr) {
  len := matchStr:Length();

  if (line:Length() - pos < len) {
    return false;
  }

  for (i := 0u64; i < len; i++) {
    if (line[pos + i] != matchStr[i]) {
      return false;
    }
  }

  return true;
};

func IdentFrom(line, j, len) {
  res := '';

  for (j < len) {
    if (line[j] == ' ') {
      break;
    }

    res ++= line[j];
    j++;
  }

  return res;
};

return func(lines, fileSet) {
  newLines := [];

  stackInit := {
    localMap: {},
    localCount: 0,
    braceDepth: 0u64
  };

  mfuncMap := {};
  mfuncCount := 0;

  gfuncList := [];
  gfuncMap := {};
  gfuncStack := null;

  for (file of fileSet:Values()) {
    mfuncMap['@/' ++ file] := mfuncCount:String();
    mfuncCount++;
  }

  inString := false;
  escaped := false;
  stack := [stackInit, null];

  for (line of lines) {
    len := line:Length();
    newLine := '';
    skipLine := false;

    for (j := 0u64; j < len; j++) {
      addStr := line[j];

      if (inString) {
        if (escaped) {
          escaped = false;
        } else if (line[j] == '\\') {
          escaped = true;
        } else if (line[j] == '\'') {
          inString = false;
        }
      } else if (match(line, j, 'mfunc $')) {
        stack = [stackInit, stack];
        ident := IdentFrom(line, j + 7u64, len);
        addStr = 'mfunc ' ++ mfuncMap[ident];
        j += 6u64 + ident:Length();
      } else if (match(line, j, 'mcall $')) {
        ident := IdentFrom(line, j + 7u64, len);
        addStr = 'mcall ' ++ mfuncMap[ident];
        j += 6u64 + ident:Length();
      } else if (match(line, j, 'hoist $')) {
        ident := IdentFrom(line, j + 7u64, len);
        j += 6u64 + ident:Length();
        skipLine = true;
        if (ident in gfuncMap:Keys()) {
          gfuncMap[ident] = gfuncList:Length();
        } else {
          gfuncMap[ident] := gfuncList:Length();
        }
        gfuncList ++= [[]];
      } else if (match(line, j, 'gfunc $')) {
        stack = [stackInit, stack];
        ident := IdentFrom(line, j + 7u64, len);
        addStr = 'gfunc ' ++ numStr(gfuncMap[ident]);
        j += 6u64 + ident:Length();
        gfuncStack = [{braceDepth: 0u64, index: gfuncMap[ident]}, gfuncStack];
      } else if (match(line, j, 'gcall $')) {
        ident := IdentFrom(line, j + 7u64, len);
        addStr = 'gcall ' ++ numStr(gfuncMap[ident]);
        j += 6u64 + ident:Length();
      } else if (match(line, j, 'func ')) {
        stack = [stackInit, stack];
        addStr = 'func ';
        j += 4u64;
      } else if (line[j] == '{') {
        stack[0].braceDepth++;

        if (gfuncStack:Kind() != 'null') {
          gfuncStack[0].braceDepth++;
        }
      } else if (line[j] == '}') {
        if (stack[0].braceDepth == 1u64) {
          stack = stack[1];
        } else {
          stack[0].braceDepth--;
        }

        if (gfuncStack:Kind() != 'null') {
          if (gfuncStack[0].braceDepth == 1u64) {
            gfuncList[gfuncStack[0].index] ++= [line];
            skipLine = true;
            gfuncStack = gfuncStack[1];
          } else {
            gfuncStack[0].braceDepth--;
          }
        }
      } else if (match(line, j, 'get $')) {
        ident := IdentFrom(line, j + 5u64, len);
        if (!(ident in stack[0].localMap:Keys())) {
          log.info [newLines ++ [[line]], stack[0]];
          assert false;
        }
        addStr = 'get ' ++ stack[0].localMap[ident];
        j += 4u64 + ident:Length();
      } else if (match(line, j, 'set $')) {
        ident := IdentFrom(line, j + 5u64, len);

        if (!(ident in stack[0].localMap:Keys())) {
          stack[0].localMap[ident] := stack[0].localCount:String();
          stack[0].localCount++;
        }

        addStr = 'set ' ++ stack[0].localMap[ident];
        j += 4u64 + ident:Length();
      } else if (line[j] == '\'') {
        inString = true;
      }

      newLine ++= addStr;
    }

    if (!skipLine) {
      if (gfuncStack:Kind() == 'null') {
        newLines ++= [newLine];
      } else {
        gfuncList[gfuncStack[0].index] ++= [newLine];
      }
    }
  }

  return Join([''])(gfuncList ++ [newLines]);
};
