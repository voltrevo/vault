import ./Breaks.vx;
import ./Statement.vx;

return func(inLoop, [type, statements, _]) {
  assert type == 'block'; // TODO: Destructure exact matches using literals

  notes := [];
  reachable := true;

  for ([sType, sData, pos] of statements) {
    if (!reachable) {
      notes ++= [{
        level: 'warn',
        message: 'Statement is unreachable',
        pos,
        subnotes: [],
        tags: #['control-flow', 'unreachable'],
      }];
    } else {
      if (sType in #['return', 'break', 'continue']) {
        reachable = false;
      } else if (sType == 'for') {
        if (
          sData.control[0] == 'nothing' &&
          Breaks(sData.body):Length() == 0u64
        ) {
          reachable = false;
        }
      }
    }
  }

  notes = ([notes] ++ statements:map(Statement:bind(inLoop))):reduce(++);

  return notes;
};
