import @/files.vx;
import @/util/SetFromArray.vx;

import Imports from './Imports/Program.vx';

import ./isolatedCompile.vx;
import ByteCode from './bytecoder/Program.vx';

func compile(state, replies) {
  if (state:Kind() == 'null') {
    [[_, args]] := replies;

    if (args:Length() != 1u64) {
      log.info 'Expected 1 argument';
    }

    [entry] := args;

    state = {
      package: {
        files: {},
        entry,
      },
      fileRequests: [entry],
      allFileRequests: #[entry],
      lines: [],
      notes: [],
    };

    return [state, [['read', entry]]];
  }

  nextFileRequests := [];
  newNotes := [];

  for ([file, lines] of [state.fileRequests, replies]:Transpose()) {
    log.info 'Isolated compile: @/' ++ file;
    {notes, tree} := isolatedCompile(lines);
    newNotes ++= notes:map(AddFileInfo:bind(file));

    if (tree:Kind() != 'null') {
      imports := SetFromArray(
        Imports(tree):map(files.resolve:bind(files.Dir(file)))
      );

      newImports := imports ~ state.allFileRequests;
      nextFileRequests ++= newImports:Values();
      state.allFileRequests |= newImports;
      state.lines ++= ByteCode(file, tree) ++ [''];
    } else {
      log.info ['got null tree for ' ++ file, notes];
    }

    state.package.files[file] := tree;
  }

  if (HasError(newNotes)) {
    return [null, [['output', state.notes]]];
  }

  state.fileRequests = nextFileRequests;
  state.notes ++= newNotes;

  if (state.fileRequests:Length() == 0u64) {
    state.lines ++= ['mcall $@/' ++ state.package.entry ++ ' return'];

    return [
      null,
      [
        ['output', state.lines],
      ],
    ];
  }

  return [state, state.fileRequests:map(func(f) => ['read', f])];
};

func HasError(notes) {
  for (note of notes) {
    if (note.level == 'error') {
      return true;
    }
  }

  return false;
};

func AddFileInfo(file, note) {
  note.pos = [file, note.pos];
  return note;
};

return compile;
