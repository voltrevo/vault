import p from '@/util/parse.vx';

import @/parser/AppendPos.vx;
import @/parser/Expression/Expression.vx;
import @/parser/Expression/Import.vx;
import @/parser/W.vx;

import ./If.vx;
import ./FailedStatement.vx;
import ./For.vx;

func ExactStatement(str) => p.Transform(
  p.Exact(str),
  func(_) => [str, null],
);

ExpStatement := p.Transform(
  p.Sequence([
    p.Optional(p.SequenceOne([
      p.Select([
        p.Exact('return'),
        p.Exact('assert'),
        p.Exact('log.info'),
        p.Exact('log.warn'),
        p.Exact('log.error'),
      ]),
      [W.Space],
    ])),
    Expression,
  ]),
  func([maybePrefix, exp]) {
    if (maybePrefix:Length() == 0u64) {
      return ['expression', exp];
    }

    [prefix] := maybePrefix;

    return [prefix, exp];
  },
);

SemiStatement := p.Select([
  Import,
  ExactStatement('breakpoint'),
  ExactStatement('break'),
  ExactStatement('continue'),
  ExpStatement,
]);

Statement := AppendPos(p.Select([
  If,
  For,
  p.SequenceOne([
    SemiStatement,
    [W.Optional],
    [p.Exact(';')],
  ]),
  FailedStatement,
]));

return Statement;
