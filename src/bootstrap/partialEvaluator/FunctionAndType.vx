import ./Block.vx;
import ./DestructureType.vx;
import ./ExpressionAndType.vx;
import ./Type.vx;

return func(scope, [xType, {name, args, body}, pos]) {
  assert xType == 'func';

  argsType := args:map(DestructureType);

  if (body[0] == 'block') {
    // TODO: Need to get type information from block partial evaluation

    return {
      scope,
      expression: ['func', {name, args, body: Block(scope, body).block}, pos],
      type: ['func', {args: argsType, output: Type.Any}],
    };
  }

  if (body[0] == 'expression') {
    bodyPos := body[2];
    body = ExpressionAndType(scope, body[1]);

    if (body.type[0] == 'never') {
      return body;
    }

    return {
      scope,
      expression: [
        'func',
        {name, args, body: ['expression', body.expression, bodyPos]},
        pos
      ],
      type: ['func', {args: argsType, output: body.type}],
    };
  }

  return switch{};
};
