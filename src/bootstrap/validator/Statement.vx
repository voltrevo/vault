import ./Argument.vx;
import ./Block.vx;
import ./SubExpression.vx;
import ./TopExpression.vx;

func Statement(inLoop, statement) {
  [type, data, pos] := statement;

  if (type in #['return', 'assert', 'log.info', 'log.warn', 'log.error']) {
    return SubExpression(data);
  }

  if (type == 'if') {
    {condition, body, tail} := data;

    notes := SubExpression(condition);
    notes ++= Block(inLoop, body);

    notes ++= switch (tail[0]) {
      'nothing' => [];
      'block' => Block(inLoop, tail);
      'if' => Statement(inLoop, tail);
    };

    return notes;
  }

  if (type == 'for') {
    {control: [controlType, controlData, _], body} := data;

    notes := [];

    if (controlType == 'condition') {
      notes ++= SubExpression(controlData);
    } else if (controlType == 'traditional') {
      {setup, condition, next} := controlData;
      notes ++= TopExpression(setup);
      notes ++= SubExpression(condition);
      notes ++= TopExpression(next);
    } else if (controlType == 'range') {
      {element, container} := controlData;
      notes ++= Argument(element);
      notes ++= SubExpression(container);
    } else if (controlType == 'nothing') {
      if (!BodyHasEscape(body)) {
        notes ++= [{
          level: 'error',
          message: (
            'Loop without control clause is infinite because it doesn\'t ' ++
            'have any break or return statements'
          ),
          pos,
          subnotes: [],
          tags: #['infinite-loop'],
        }];
      }
    } else {
      assert false;
    }

    notes ++= Block(true, body);

    return notes;
  }

  if (type in #['break', 'continue']) {
    return switch (inLoop) {
      true => [];
      false => [{
        level: 'error',
        message: type ++ ' statement without loop',
        pos,
        subnotes: [],
        tags: #['loop-control'],
      }];
    };
  }

  return switch (type) {
    'expression' => TopExpression(data);
    'note' => [data];
  };
};

func BodyHasEscape([_, statements, _]) {
  for ([type, data, _] of statements) {
    if (type in #['break', 'return']) {
      return true;
    }

    if (type == 'for') {
      if (BodyHasEscape(data.body)) {
        return true;
      }
    }

    if (type == 'if') {
      func IfHasEscape({condition: _, body, tail}) {
        if (BodyHasEscape(body)) {
          return true;
        }

        return switch (tail[0]) {
          'nothing' => false;
          'block' => BodyHasEscape(tail);
          'if' => IfHasEscape(tail);
        };
      };

      if (IfHasEscape(data)) {
        return true;
      }
    }
  }

  return false;
};

return Statement;
