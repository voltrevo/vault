import ./FunctionAndType.vx;
import ./Scope.vx;
import ./Statement.vx;

return func(scope, [type, statements, pos]) {
  assert type == 'block'; // TODO: Destructure exact matches using literals

  scope = Scope.push(scope);
  newStatements := [];

  nonHoists := [];

  for (statement of statements) {
    hoist := false;
    if (statement[0] == 'expression') {
      if (statement[1][0] == 'func') {
        hoist = true;
        {name, args: _, body: _} := statement[1][1];
        assert name[0] == 'identifier';
        fnType := null;
        {expression: _, type: fnType, scope} = FunctionAndType(scope, statement[1]);
        scope = Scope.add(scope, name[1], fnType);
      }
    }

    if (!hoist) {
      nonHoists ++= [statement];
    }
  }

  for (statement of nonHoists) {
    {scope, statement} = Statement(scope, statement);

    if (!(statement in #[null])) {
      newStatements ++= [statement];

      if (statement[0] in #['break', 'continue', 'return']) {
        break;
      }
    }
  }

  scope = Scope.pop(scope);

  return {scope, block: [type, newStatements, pos]};
};
