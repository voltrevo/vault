import ./Argument.vx;
import ./Block.vx;
import ./DestructureType.vx;
import ./FuncSignature.vx;
import ./Scope.vx;

return func(scope, fn) {
  [xType, {name, args, body}, pos] := fn;
  assert xType == 'func';

  argsType := args:map(DestructureType);

  fnScope := Scope.push(scope);
  fnScope.variables['.return'] := ['never', null]; // TODO: Scope.addShallow?

  if (name[0] == 'identifier') {
    // TODO: Fix only using Type.any for recursion calls here.
    fnScope = Scope.set(fnScope, name[1], FuncSignature(fn));
  }

  for (arg of args) {
    fnScope = Argument(fnScope, arg);
  }

  if (body[0] == 'expression') {
    body = ['block', [['return', body[1], body[2]]], body[2]];
  }

  {scope: fnScope, block: body} = Block(fnScope, body);

  return {
    expression: ['func', {name, args, body}, pos],
    type: ['func', {args: argsType, output: fnScope.variables['.return']}],
  };
};
