import @/parse/parse.vx;

import ./tryConvertFromU64.vx;

func NonEmptyLine(lines, [i, j]) {
  if (i >= lines:Length()) {
    return null;
  }

  line := lines[i];

  if (j >= line:Length()) {
    return null;
  }

  return line;
};

func Digit(s) => switch (s) {
  '0' => 0u64;
  '1' => 1u64;
  '2' => 2u64;
  '3' => 3u64;
  '4' => 4u64;
  '5' => 5u64;
  '6' => 6u64;
  '7' => 7u64;
  '8' => 8u64;
  '9' => 9u64;

  default => null;
};

func RawU64(lines, [i, j]) {
  line := NonEmptyLine(lines, [i, j]);

  if (line:Kind() == 'null') {
    return null;
  }

  res := null;

  for {
    digit := Digit(line[j]);

    if (digit:Kind() == 'null') {
      break;
    }

    if (res:Kind() == 'null') {
      res = digit;
    } else {
      before := res;

      res *= 10u64;
      res += digit;

      if (res < before) {
        return [['overflow'], [i, j]];
      }
    }

    j++;

    if (j >= line:Length()) {
      break;
    }
  }

  if (res:Kind() == 'null') {
    return null;
  }

  return [['literal', res], [i, j]];
};

func NumberU64(lines, [i, j]) {
  output := RawU64(lines, [i, j]);

  if (output:Kind() == 'null') {
    return null;
  }

  literal := null;
  [literal, [i, j]] = output;

  suffix := parse.Exact('u64')(lines, [i, j]);

  if (suffix:Kind() == 'null') {
    return null;
  }

  [i, j] = suffix:Back();

  return [literal, [i, j]];
};

func NumberConvertedUnsigned(suffix) => func(lines, [i, j]) {
  output := RawU64(lines, [i, j]);

  if (output:Kind() == 'null') {
    return null;
  }

  literal := null;
  [literal, [i, j]] = output;

  suffixParsed := parse.Exact(suffix)(lines, [i, j]);

  if (suffixParsed:Kind() == 'null') {
    return null;
  }

  [i, j] = suffixParsed:Back();

  value := literal[1u64];
  value = tryConvertFromU64(value, suffix);

  if (value:Kind() == 'null') {
    return [['overflow'], [i, j]];
  }

  literal[1u64] = value;

  return [literal, [i, j]];
};

func NumberConvertedSigned(lines, [i, j]) {
  minus := parse.Exact('-')(lines, [i, j]);
  isNegated := false;

  if (minus:Kind() != 'null') {
    isNegated = true;
    [i, j] = minus:Back();
  }

  raw := RawU64(lines, [i, j]);

  if (raw:Kind() == 'null') {
    return null;
  }

  value := null;
  [value, [i, j]] = raw;

  parsedSuffix := parse.Select([
    parse.Exact('i8'),
    parse.Exact('i16'),
    parse.Exact('i32'),
    parse.Exact('i64'),
  ])(lines, [i, j]);

  suffix := 'i32';

  if (parsedSuffix:Kind() != 'null') {
    [suffix, [i, j]] = parsedSuffix;
  }

  value[1u64] = tryConvertFromU64(value[1u64], suffix);

  if (value[1u64]:Kind() == 'null') {
    return [['overflow'], [i, j]];
  }

  if (isNegated) {
    value[1u64] = -value[1u64];
  }

  return [value, [i, j]];
};

return parse.Select([
  NumberConvertedUnsigned('u8'),
  NumberConvertedUnsigned('u16'),
  NumberConvertedUnsigned('u32'),
  NumberU64,
  NumberConvertedSigned,
]);
