import @/util/kinds.vx;
import @/util/Join.vx;
import @/partialEvaluator/Type.vx;
import @/partialEvaluator/TypeError.vx;

func Eval(op, inputs) {
  if (inputs:Length() == 1u64) {
    [input] := inputs;

    if (op in #['unary +', 'unary -']) {
      input = Type.IntersectKindsDeep(input, switch (op) {
        'unary +' => kinds.arithmetic;
        'unary -' => kinds.arithmetic ~ #['u8', 'u16', 'u32', 'u64'];
      });
    } else if (op == 'unary !') {
      input = Type.Intersection(input, ['kinds', #['bool']]);
    } else if (op == 'unary ~') {
      input = Type.Intersection(input, ['kinds', kinds.number | #['set']]);
    } else {
      assert false;
    }

    output := switch (input[0]) {
      'literal' => ['literal', switch (op) {
        'unary +' => +input[1];
        'unary -' => -input[1];
        'unary !' => !input[1];
        'unary ~' => ~input[1];
      }];

      default => input;
    };

    return {inputs: [input], output};
  }

  if (inputs:Length() == 2u64) {
    if (op in #['==', '!=', '<', '>', '<=', '>=', '+', '-']) {
      [left, right] := inputs;

      allowedKinds := switch {
        (op in #['+', '-']) => kinds.arithmetic;
        default => kinds.all ~ #['func'];
      };

      left = Type.IntersectKindsDeep(left, allowedKinds);
      right = Type.IntersectKindsDeep(right, allowedKinds);

      shape := Type.ShapeIntersection(left, right);

      if (shape[0] == 'never') {
        return {inputs: [shape, shape], output: shape};
      }

      // TODO: Should these be generated during ShapeIntersection?
      left = Type.Intersection(left, shape);
      right = Type.Intersection(right, shape);

      assert !('never' in #[left[0], right[0]]);

      output := switch ([left[0], right[0]]) {
        ['literal', 'literal'] => ['literal', switch (op) {
          '==' => left[1] == right[1];
          '!=' => left[1] != right[1];
          '<' => left[1] < right[1];
          '>' => left[1] > right[1];
          '<=' => left[1] <= right[1];
          '>=' => left[1] >= right[1];
          '+' => left[1] + right[1];
          '-' => left[1] - right[1];
        }];

        default => switch (op in #['+', '-']) {
          // TODO: Handle partial literals e.g. [1, x] + [2, y] => [3, (shape)]
          true => shape;

          // TODO: Handle partial literals e.g. [1, x] == [2, y] => false
          false => ['kinds', #['bool']];
        };
      };

      return {inputs: [left, right], output};
    }

    if (op == '++') {
      [left, right] := inputs;

      kindSet := (
        #['array', 'object', 'string'] &
        Type.Kinds(left) &
        Type.Kinds(right)
      );

      if (kindSet == #[]) {
        type := ['never', ['++ between incompatible kinds']];
        return {inputs: [type, type], output: type};
      }

      kindValues := kindSet:Values();

      if (kindValues:Length() > 1u64) {
        assert #[left[0], right[0]] == #['kinds'];
        type := ['kinds', kindSet];
        return {inputs: [type, type], output: type};
      }

      [kind] := kindValues;

      if (kind == 'object') {
        if ('kinds' in #[left[0], right[0]]) {
          return {inputs: [left, right], output: ['kinds', #['object']]};
        }

        leftKeys := left[1]:Keys();
        rightKeys := right[1]:Keys();

        sharedKeys := leftKeys & rightKeys;

        if (sharedKeys != #[]) {
          type := ['never', [
            '++ between objects with shared keys: ' ++
            Join(', ')(sharedKeys:Values())
          ]];

          return {inputs: [type, type], output: type};
        }

        if (left[0] == 'literal' && right[0] == 'literal') {
          return {
            inputs: [left, right],
            output: ['literal', left[1] ++ right[1]],
          };
        }

        func SubTypes(type) => switch (type[0]) {
          'literal' => Type.demoteObjectLiteral(type)[1];
          'object' => type[1];
        };

        return {
          inputs: [left, right],
          output: ['object', SubTypes(left) ++ SubTypes(right)],
        };
      }

      if (kind == 'array') {
        if ('kinds' in #[left[0], right[0]]) {
          return {inputs: [left, right], output: ['kinds', #['array']]};
        }

        if (left[0] == 'literal' && right[0] == 'literal') {
          return {
            inputs: [left, right],
            output: ['literal', left[1] ++ right[1]],
          };
        }

        func SubTypes(type) => switch (type[0]) {
          'literal' => Type.demoteArrayLiteral(type)[1];
          'array' => type[1];
          'array-uniform' => [type[1]];
        };

        subTypes := SubTypes(left) ++ SubTypes(right);

        if ('array-uniform' in #[left[0], right[0]]) {
          subType := subTypes:reduce(Type.Union);

          return {
            inputs: [left, right],
            output: ['array-uniform', subType],
          };
        }

        return {
          inputs: [left, right],
          output: ['array', subTypes],
        };
      }

      if (kind == 'string') {
        if (left[0] == 'literal' && right[0] == 'literal') {
          return {
            inputs: [left, right],
            output: ['literal', left[1] ++ right[1]],
          };
        }

        return {
          inputs: [left, right],
          output: ['kinds', #['string']],
        };
      }

      assert false;
      return null;
    }

    if (op in #['&&', '||']) {
      [left, right] := inputs;

      left = Type.Intersection(left, ['kinds', #['bool']]);

      if (left[0] == 'never') {
        return {inputs: [left, left], output: left};
      }

      shortCircuitValue := switch (op) {
        '&&' => false;
        '||' => true;
      };

      if (left[0] == 'literal') {
        if (left[1] == shortCircuitValue) {
          return {inputs: [left, right], output: left};
        }

        right = Type.Intersection(right, ['kinds', #['bool']]);

        if (right[0] == 'never') {
          return {inputs: [right, right], output: right};
        }

        return {inputs: [left, right], output: right};
      }

      if (Type.Intersection(right, ['kinds', #['bool']])[0] == 'never') {
        left = ['literal', shortCircuitValue];
        return {inputs: [left, right], output: left};
      }

      return {inputs: [left, right], output: ['kinds', #['bool']]};
    }

    if (op == 'functionCall') {
      [fn, args] := inputs;

      fn = Type.Intersection(fn, ['kinds', #['func']]);
      args2 := args; // hmm

      func Nevers(type) => {
        inputs: [type, args2:map(func(_) => type)],
        output: type,
      };

      if (fn[0] == 'never') {
        return Nevers(fn);
      }

      if (fn[0] != 'func') {
        return {inputs: [fn, args], output: Type.any};
      }

      if (fn[1].args:Length() != args:Length()) {
        type := ['never', [
          'arg length mismatch: ' ++
          args:Length():String() ++
          ' provided but ' ++
          fn[1].args:Length():String() ++
          ' needed'
        ]];

        return Nevers(type);
      }

      for (i := 0u64; i < args:Length(); i++) {
        args[i] = Type.Intersection(args[i], fn[1].args[i]);

        if (args[i][0] == 'never') {
          return Nevers(Type.NeverPath(['arg', i], args[i]));
        }
      }

      return {inputs: [fn, args], output: fn[1].output};
    }

    if (op == 'in') {
      [element, container] := inputs;

      element = Type.IntersectKindsDeep(element, kinds.all ~ #['func']);

      if (element[0] == 'never') {
        return {inputs: [element, element], output: element};
      }

      container = Type.Intersection(container, ['kinds', #['set']]);

      if (container[0] == 'never') {
        return {inputs: [container, container], output: container};
      }

      if (container[0] == 'literal') {
        if (element[0] == 'literal') {
          return {
            inputs: [element, container],
            output: ['literal', element[1] in container[1]],
          };
        }

        possible := false;

        for (el of container[1]:Values()) {
          if (Type.Intersection(element, ['literal', el])[0] != 'never') {
            possible = true;
          }
        }

        return {
          inputs: [element, container],
          output: switch (possible) {
            true => ['kinds', #['bool']];
            false => ['literal', false];
          },
        };
      }

      if (container[0] == 'set') {
        possible := Type.Intersection(element, container[1])[0] != 'never';

        return {
          inputs: [element, container],
          output: switch (possible) {
            true => ['kinds', #['bool']];
            false => ['literal', false];
          },
        };
      }

      return {
        inputs: [element, container],
        output: ['kinds', #['bool']],
      };
    }

    if (op == 'subscript') {
      [container, index] := inputs;
      containerKinds := Type.Kinds(container) & #['array', 'object', 'string'];

      if (containerKinds == #[]) {
        type := ['never', [
          'subscript container cannot be ' ++
          Type.String(container)
        ]];

        return {inputs: [type, type], output: type};
      }

      if (containerKinds:Values():Length() != 1u64) {
        allowedIndexKinds := switch ('object' in containerKinds) {
          true => #['i32', 'u64', 'string'];
          false => #['i32', 'u64'];
        };

        index = Type.Intersection(index, ['kinds', allowedIndexKinds]);

        if (index[0] == 'never') {
          return {inputs: [index, index], output: index};
        }

        indexKinds := Type.Kinds(index);

        newContainerKinds := #[];

        if ((#['i32', 'u64'] & indexKinds) != #[]) {
          newContainerKinds |= #['array', 'string'];
        }

        if ('string' in indexKinds) {
          newContainerKinds |= #['object'];
        }

        container = ['kinds', containerKinds & newContainerKinds];

        return {inputs: [container, index], output: Type.any};
      }

      [containerKind] := containerKinds:Values();

      if (container[0] == 'kinds') {
        index = Type.Intersection(index, ['kinds', switch (containerKind) {
          'array' => #['i32', 'u64'];
          'string' => #['i32', 'u64'];
          'object' => #['string'];
        }]);

        if (index[0] == 'never') {
          return {inputs: [index, index], output: index};
        }

        return {inputs: [container, index], output: Type.any};
      }

      if (container[0] == 'array-uniform') {
        index = Type.Intersection(index, ['kinds', #['i32', 'u64']]);

        if (index[0] == 'never') {
          return {inputs: [index, index], output: index};
        }
      }

      if (containerKind == 'array') {
        index = Type.Intersection(index, ['kinds', #['i32', 'u64']]);

        if (index[0] == 'never') {
          return {inputs: [index, index], output: index};
        }

        if (container[0] == 'array-uniform') {
          return {inputs: [container, index], output: container[1]};
        }

        if (container[1]:Length() == 0u64) {
          // 'array' is a somewhat meaningful possibility but the type algebra
          // should always narrow a zero-length array into []
          assert container[0] == 'literal';

          type := ['never', null];
          return {inputs: [type, type], output: type};
        }

        if (index[0] != 'literal') {
          containerArray := switch (container[0]) {
            'array' => container;
            'literal' => Type.demoteArrayLiteral(container);
          };

          element := containerArray[1]:reduce(Type.Union);

          return {inputs: [container, index], output: element};
        }

        indexValue := index[1];

        if (indexValue:Kind() == 'i32') {
          if (indexValue < 0) {
            type := ['never', null];
            return {inputs: [type, type], output: type};
          }

          next := 0u64;

          // TODO: This is not a good way to do i32 -> u64 conversion.
          for (i := 0; i < indexValue; i++) {
            next++;
          }

          indexValue = next;
        }

        if (indexValue >= container[1]:Length()) {
          type := ['never', null];
          return {inputs: [type, type], output: type};
        }

        return {
          inputs: [container, index],
          output: switch (container[0]) {
            'array' => container[1][index[1]];
            'literal' => ['literal', container[1][index[1]]];
          },
        };
      }

      if (containerKind == 'string') {
        assert container[0] == 'literal';
        index = Type.Intersection(index, ['kinds', #['i32', 'u64']]);

        if (index[0] == 'never') {
          return {inputs: [index, index], output: index};
        }

        if (index[0] != 'literal') {
          element := ['kinds', #['string']];
          return {inputs: [container, index], output: element};
        }

        if (index[1] >= container[1]:Length()) {
          type := ['never', null];
          return {inputs: [type, type], output: type};
        }

        return {
          inputs: [container, index],
          output: ['literal', container[1][index[1]]],
        };
      }

      if (containerKind == 'object') {
        index = Type.Intersection(index, ['kinds', #['string']]);

        if (index[0] == 'never') {
          return {inputs: [index, index], output: index};
        }

        keys := container[1]:Keys();

        if (keys == #[]) {
          // 'object' is a somewhat meaningful possibility but the type algebra
          // should always narrow an empty object into {}
          assert container[0] == 'literal';

          type := ['never', null];
          return {inputs: [type, type], output: type};
        }

        if (index[0] != 'literal') {
          containerObject := switch (container[0]) {
            'object' => container;
            'literal' => Type.demoteObjectLiteral(container);
          };

          element := containerObject[1]:Values():reduce(Type.Union);

          return {inputs: [container, index], output: element};
        }

        if (!(index[1] in keys)) {
          type := ['never', null];
          return {inputs: [type, type], output: type};
        }

        return {
          inputs: [container, index],
          output: switch (container[0]) {
            'object' => container[1][index[1]];
            'literal' => ['literal', container[1][index[1]]];
          },
        };
      }

      return switch{};
    }

    [leftAllowedKinds, rightAllowedKinds] := switch {
      (op == '**') => [kinds.float, kinds.float];
      (op == '*') => [kinds.arithmetic, kinds.arithmetic];
      (op == '/') => [kinds.arithmetic, kinds.number];
      (op == '%') => [kinds.number, kinds.number];
      (op in #['<<', '>>']) => [kinds.integer, kinds.integer];

      (op in #['~', '&', '^', '|']) => [
        kinds.integer | #['set'],
        kinds.integer | #['set'],
      ];
    };

    [left, right] := inputs;

    left = Type.Intersection(left, ['kinds', leftAllowedKinds]);
    right = Type.Intersection(right, ['kinds', rightAllowedKinds]);

    if (op in #['**', '%', '<<', '>>', '~', '&', '^', '|']) {
      // TODO: ** should include possibility of exponentiation by squaring

      sharedKinds := Type.Kinds(left) & Type.Kinds(right);

      if (sharedKinds == #[]) {
        type := ['never', null];
        return {inputs: [type, type], output: type};
      }

      if (#[left[0], right[0]] == #['literal']) {
        return {
          inputs: [left, right],
          output: ['literal', switch (op) {
            '**' => left[1] ** right[1];
            '%' => left[1] % right[1];
            '<<' => left[1] << right[1];
            '>>' => left[1] >> right[1];
            '~' => left[1] ~ right[1];
            '&' => left[1] & right[1];
            '^' => left[1] ^ right[1];
            '|' => left[1] | right[1];
          }],
        };
      }

      return {
        inputs: [left, right],
        output: ['kinds', sharedKinds],
      };
    }

    if (left[0] == 'never') {
      return {inputs: [left, left], output: left};
    }

    if (right[0] == 'never') {
      return {inputs: [right, right], output: right};
    }

    assert op in #['*', '/'];

    if (
      op == '/' ||
      (op == '*' && ((Type.Kinds(right) ~ kinds.number) == #[]))
    ) {
      left = Type.IntersectKindsDeep(
        left,
        Type.Kinds(right) | #['object', 'array'],
      );

      if (left[0] == 'never') {
        return {inputs: [left, left], output: left};
      }

      if (left[0] == 'literal' && right[0] == 'literal') {
        return {
          inputs: [left, right],
          output: ['literal', switch (op) {
            '/' => left[1] / right[1];
            '*' => left[1] * right[1];
          }],
        };
      }

      // TODO: Partial literals

      return {inputs: [left, right], output: Type.Shape(left)};
    }

    if (op == '*') {
      // TODO: Dimensions checking etc, lots to do here but leaving it until
      // later
      return {inputs: [left, right], output: ['kinds', Type.Kinds(left)]};
    }
  }

  return switch{};
};

func CheckSameLayout({
  location,
  op,
  left,
  right,
  allowedKinds,
  pos,
}) {
  func Prefix() {
    if (location:Length() == 0u64) {
      return '';
    }

    return 'At location ' ++ location:String() ++ ': ';
  };

  commonKinds := Type.Kinds(left) & Type.Kinds(right);

  if (commonKinds == #[]) {
    return TypeError(pos, (
      Prefix() ++
      'Can\'t apply ' ++
      op ++
      ' between different kinds ' ++
      left:Kind() ++
      ', ' ++
      right:Kind()
    ));
  }

  commonAllowedKinds := commonKinds & allowedKinds;

  if (commonAllowedKinds == #[]) {
    return TypeError(pos, (
      Prefix() ++
      'Can\'t apply ' ++
      op ++
      ' with ' ++
      Type.String(['kinds', commonKinds]) ++
      ' operands'
    ));
  }

  if (left[0] == right[0]) {
    if (left[0] in #['array', 'object']) {
      leftKeys := left[1]:Keys();
      rightKeys := right[1]:Keys();

      if (leftKeys != rightKeys) {
        return TypeError(pos, (
          Prefix() ++
          'Can\'t apply ' ++
          op ++
          ' between containers with different keys ' ++
          leftKeys:String() ++
          ', ' ++
          rightKeys:String()
        ));
      }

      for (key of leftKeys:Values()) {
        res := CheckSameLayout({
          location: location ++ [key],
          op,
          left: left[1][key],
          right: right[1][key],
          allowedKinds,
          pos,
        });

        if (res[0] == 'note') {
          return res;
        }
      }
    } else if (left[0] == 'array-uniform') {
      res := CheckSameLayout({
        location: location ++ ['u64'],
        op,
        left: left[1],
        right: right[1],
        allowedKinds,
        pos,
      });

      if (res[0] == 'note') {
        return res;
      }
    }
  }

  return null;
};

func CheckLayout({
  location,
  op,
  type,
  allowedKinds,
  pos,
}) {
  func Prefix() {
    if (location:Length() == 0u64) {
      return '';
    }

    return 'At location ' ++ location:String() ++ ': ';
  };

  if ((Type.Kinds(type) & allowedKinds) == #[]) {
    return TypeError(pos, (
      Prefix() ++
      'Can\'t apply ' ++
      op ++
      ' with ' ++
      Type.String(type) ++
      ' operands'
    ));
  }

  if (type[0] in #['array', 'object']) {
    keys := type[1]:Keys();

    for (key of keys:Values()) {
      res := CheckLayout({
        location: location ++ [key],
        op,
        type: type[1][key],
        allowedKinds,
        pos,
      });

      if (res[0] == 'note') {
        return res;
      }
    }

    return null;
  }

  if (type[0] == 'array-uniform') {
    res := CheckLayout({
      location: location ++ ['u64'],
      op,
      type: type[1],
      allowedKinds,
      pos,
    });

    if (res[0] == 'note') {
      return res;
    }
  }

  return null;
};

return Eval;
