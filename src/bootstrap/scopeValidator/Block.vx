import ./applyScopeEvents.vx;
import ./Statement.vx;

func Block(preEvents, [type, statements, _]) {
  assert type == 'block'; // TODO: Destructure exact matches using literals

  hoistCaptures := {};
  usesFromCaptures := [];
  sLen := statements:Length();

  for (i := 0u64; i < sLen; i++) {
    sEvents := null;

    if (statements[i][0] == 'expression') {
      if (statements[i][1][0] == 'func') {
        name := statements[i][1][1].name;

        if (name[0] != 'nothing' && !(name[1] in hoistCaptures:Keys())) {
          createEvt := ['create', name, {
            rightEvents: [],
            source: statements[i][1],
          }];

          preEvents = [createEvt] ++ preEvents;

          statements[i][1][1].name = [
            'nothing',
            null,
            statements[i][1][1].name[2]
          ];

          captures := [];
          sEvents = Statement(statements[i]);

          // TODO: array:filter
          for (evt of sEvents) {
            if (evt[0] == 'capture') {
              captures ++= [evt[1]];
            }
          }

          hoistCaptures[name[1]] := captures;
        }
      }
    }

    if (sEvents in #[null]) {
      sEvents = Statement(statements[i]);

      for (evt of sEvents) {
        if (evt[0] == 'capture') {
          // Capture must have come from a function not hoisted in this scope,
          // adding this capture as a use is important in the case that the
          // capture turns out to be a hoisted function in this scope. In that
          // case, it will make sure all of that functions captures are
          // available at this location, which is what we want.
          usesFromCaptures ++= [[evt[1][1], evt]];
        }
      }
    }

    preEvents ++= sEvents;
  }

  {scope, events} := applyScopeEvents({}, preEvents);

  for ([name, capture] of usesFromCaptures) {
    if (name in hoistCaptures:Keys()) {
      scope[name].use ++= [capture[1]];
    }
  }

  for ([name, {pos, source, use, capture, mutate}] of scope:Entries()) {
    if (use:Length() + capture:Length() == 0u64) {
      events ++= [['note', {
        level: 'warn',
        message: 'Variable {' ++ name ++ '} is not used',
        pos,
        subnotes: [],
        tags: #['scope', 'no-effect', 'unused'],
      }]];
    }

    if (capture:Length() > 0u64 && mutate:Length() > 0u64) {
      events ++= [['note', CaptureMutationNote({
        name,
        pos,
        capture,
        mutate
      })]];
    }

    if (source[0] == 'func') {
      for ([_, _, mutatePos] of mutate) {
        events ++= [['note', {
          level: 'error',
          message: 'Mutating function {' ++ name ++ '} is not allowed',
          pos: mutatePos,
          subnotes: [],
          tags: #['function-mutation'],
        }]];
      }
    }
  }

  for ([hoistName, captures] of hoistCaptures:Entries()) {
    capturesToProcess := captures;
    processIdx := 0u64;
    processed := #[hoistName];
    capturesExt := [];

    regularCaptures := #[];
    transitiveCaptures := #[];

    for ([_, name, _] of captures) {
      regularCaptures |= #[name];
    }

    for (processIdx < capturesToProcess:Length()) {
      capture := capturesToProcess[processIdx];
      name := capture[1];

      if (!(name in processed)) {
        processed |= #[name];

        if (name in hoistCaptures:Keys()) {
          capturesToProcess ++= hoistCaptures[name];
        } else {
          capturesExt ++= [capture];

          if (!(name in regularCaptures)) {
            transitiveCaptures |= #[name];
          }
        }
      }

      processIdx++;
    }

    for ([_, _, usePos] of scope[hoistName].use) {
      for ([_, captureName, capturePos] of capturesExt) {
        if (captureName in scope:Keys()) { // TODO: implement continue here
          captureCreationPos := scope[captureName].source[2];

          if (usePos[0] <= captureCreationPos[1]) {
            events ++= [['note', IncompleteClosureNote({
              hoist: {
                name: hoistName,
                usePos,
              },
              capture: {
                name: captureName,
                pos: capturePos,
                creationPos: captureCreationPos,
                creationIdentifierPos: scope[captureName].pos,
                transitive: captureName in transitiveCaptures,
              }
            })]];
          }
        }
      }
    }
  }

  return events;
};

func CaptureMutationNote({name, pos, capture, mutate}) {
  tags := #['scope', 'capture-mutation'];

  subnotes := [{
    level: 'info',
    message: (
      '{' ++
      name ++
      '} is captured at ' ++
      capture[0][2]:String() ++
      ' and mutated at ' ++
      mutate[0][2]:String()
    ),
    pos,
    subnotes: [],
    tags,
  }];

  for (i := 1u64; i < mutate:Length(); i++) {
    [_, _, mPos] := mutate[i];

    subnotes ++= [{
      level: 'error',
      message: 'Can\'t mutate captured variable {' ++ name ++ '}',
      pos: mPos,
      subnotes: [],
      tags,
    }];
  }

  subnotes ++= capture:map(func([_, _, cPos]) => {
    level: 'info',
    message: (
      'Capturing {' ++
      name ++
      '} here prevents mutation at ' ++
      mutate[0][2]:String()
    ),
    pos: cPos,
    subnotes: [],
    tags,
  });

  return {
    level: 'error',
    message: 'Can\'t mutate captured variable {' ++ name ++ '}',
    pos: mutate[0][2],
    subnotes,
    tags,
  };
};

func IncompleteClosureNote({hoist, capture}) {
  tags := #['scope', 'incomplete-closure'];

  if (capture.transitive) {
    tags |= #['transitive-closure'];
  }

  return {
    level: 'error',
    message: (
      'Function {' ++
      hoist.name ++
      '} is not available here because it captures {' ++
      capture.name ++
      '} which doesn\'t exist until after ' ++
      capture.creationPos:String()
    ),
    pos: hoist.usePos,
    subnotes: [
      {
        level: 'info',
        message: (
          'Captured variable {' ++
          capture.name ++
          '} doesn\'t exist when {' ++
          hoist.name ++
          '} is accessed at ' ++
          hoist.usePos:String()
        ),
        pos: capture.pos,
        subnotes: [],
        tags,
      },
      {
        level: 'info',
        message: (
          'There is an attempt to indirectly access variable {' ++
          capture.name ++
          '} when it doesn\'t exist at ' ++
          hoist.usePos:String()
        ),
        pos: capture.creationPos,
        subnotes: [],
        tags,
      },
    ],
    tags,
  };
};

return Block;
