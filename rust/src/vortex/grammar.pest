WHITESPACE = _{ (" " | "\r\n" | "\n")+ }
COMMENT = _{ ("//" ~ (!"\n" ~ ANY)*) | ("/*" ~ (!"*/" ~ ANY)* ~ "*/") }

null = { "null" }
bool = { "true" | "false" }
number = { ASCII_DIGIT+ }

identifier = { (ASCII_ALPHA | "_") ~ (ASCII_ALPHA | ASCII_DIGIT | "_")* }
atom = { null | bool | number | identifier | ("(" ~ expression ~ ")") }

assignmentOperator = {
  ":=" | "=" | "**=" | "+=" | "++=" | "-=" | "*=" | "/=" | "%=" | "<<=" | ">>=" | "&=" |
  "|=" | "^=" | "&&=" | "||=" | "~="
}

binaryOperator = {
  "**" |
  "*" | "/" | "%" |
  "++" | "+" | "-" |
  "<<" | ">>" |
  "<=" | ">=" | "<" | ">" |
  "==" | "!=" |
  "~" |
  "&" |
  "^" |
  "|" |
  "&&" |
  "||" |
  "in"
}

assignmentTarget = { identifier } // TODO: Destructuring

expression = { atom ~ (binaryOperator ~ atom)* }

block = { "{" ~ statement* ~ "}" }

functionStatement = { "fn" ~ identifier ~ "()" ~ "{" ~ statement* ~ "}" }
assignment = { assignmentTarget ~ assignmentOperator ~ expression }
assignmentStatement = { assignment ~ ";" }
mutation = { assignment } // TODO: include increment/decrement
mutationStatement = { mutation ~ ";" }

keywordStatement = {
  (
    "breakpoint" |
    "break" |
    "continue"
  ) ~ ";"
}

keywordExpressionStatement = {
  (
    "return" |
    "assert" |
    ("log." ~ ("info" | "warn" | "error"))
  ) ~ expression ~ ";"
}

ifStatement = {
  "if" ~ "(" ~ expression ~ ")" ~ block ~ elseClause?
}

elseClause = {
  "else" ~ (ifStatement | block)
}

forStatement = {
  "for" ~ "(" ~ (
    (mutation ~ ";" ~ expression ~ ";" ~ mutation) |
    expression |
    (assignmentTarget ~ "of" ~ expression)
  ) ~ ")" ~ block
}

statement = {
  functionStatement |
  keywordStatement |
  keywordExpressionStatement |
  ifStatement |
  forStatement |
  mutationStatement
}

file = { SOI ~ statement* ~ EOI }
