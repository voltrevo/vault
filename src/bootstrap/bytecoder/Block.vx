import @/formatLocation.vx;
import FunctionScopeEvents from '@/scopeValidator/Function.vx';
import @/util/removeKey.vx;

import ./ByteCoder.vx;
import ./Destructure.vx;
import ./Expression.vx;
import ./Statement.vx;

func Block(coder, block) {
  lines := [];

  hoists := [];
  statements := [];

  func isHoist(statement) {
    if (statement[0] != 'expression') {
      return false;
    }

    return statement[1][0] == 'func';
  };

  for (statement of block[1]) {
    if (isHoist(statement)) {
      hoist := statement[1];
      if (!(hoist[1].name in #[null])) { // Anonymous hoist is meaningless. Validation emits a warn about this. TODO: should be error?
        hoists ++= [hoist];
      }
    } else if (statement[0] == 'import') {
      [_, coder] = Statement(coder, statement);
    } else {
      statements ++= [statement];
    }
  }

  hoistCaptureMap := {};
  hoistCaptureMapExt := {};

  for (hoist of hoists) {
    name := hoist[1].name[1];
    captures := #[];

    for (evt of FunctionScopeEvents(hoist)) {
      if (evt[0] == 'use') {
        isCapture := true;
        useName := evt[1][1];

        if (useName in coder.names:Keys()) {
          if (coder.names[useName].t == 'mfunc') {
            isCapture = false;
          }
        }

        if (isCapture) {
          captures |= #[useName];
        }
      }
    }

    hoistCaptureMap[name] := captures;
  }

  hoistNames := hoistCaptureMap:Keys();

  for (hoistName of hoistNames:Values()) {
    deps := [hoistName];
    seen := #[];
    capturesExt := #[];

    for (i := 0u64; i < deps:Length(); i++) {
      dep := deps[i];

      seen |= #[dep];

      for (capture of hoistCaptureMap[dep]:Values()) {
        if (capture in hoistNames) {
          if (!(capture in seen)) {
            deps ++= [capture];
          }
        } else {
          capturesExt |= #[capture];
        }
      }
    }

    hoistCaptureMapExt[hoistName] := capturesExt;
  }

  for (hoist of hoists) {
    hoistName := hoist[1].name[1];
    captures := hoistCaptureMapExt[hoist[1].name[1]];

    if (captures == #[] || captures == #[hoistName]) {
      coder = ByteCoder.setGFunc(coder, hoistName, #[]);
      lines ++= ['hoist $' ++ hoistName];
    } else {
      coder = ByteCoder.setGFunc(coder, hoistName, captures);
      lines ++= ['hoist $.captureless.' ++ hoistName];
    }
  }

  for (hoist of hoists) {
    hoistName := hoist[1].name[1];
    entry := coder.names[hoistName];

    captures := entry.captures;
    directCaptures := hoistCaptureMap[hoistName];

    lines ++= [''];

    if (captures == #[] || captures == #[hoistName]) {
      lines ++= ['gfunc $' ++ hoistName ++ ' {'];
    } else {
      lines ++= ['gfunc $.captureless.' ++ hoistName ++ ' {'];
    }

    captureLines := [];
    relabelledCaptures := #[];

    for (capture of captures:Values()) {
      relabel := switch (capture in directCaptures) {
        true => capture;
        false => '.indirect.' ++ capture;
      };

      captureLines ++= [ByteCoder.indent(ByteCoder.Set(relabel))];
      relabelledCaptures |= #[relabel];
    }

    innerCoder := coder;
    innerCoder.names[hoistName].captures = relabelledCaptures;

    lines ++= captureLines;

    for (arg of hoist[1].args) {
      lines ++= (Destructure(coder, arg, 'insert')
        :map(ByteCoder.indent)
      );
    }

    for (otherHoistName of hoistNames:Values()) {
      if (otherHoistName != hoistName) {
        otherCaptures := (hoistCaptureMapExt[otherHoistName]
          :Values()
          :map(func(otherCapture) => switch(otherCapture in directCaptures) {
            true => otherCapture;
            false => '.indirect.' ++ otherCapture;
          })
        );

        innerCoder.names[otherHoistName].captures = otherCaptures;
      }
    }

    for (directCapture of directCaptures:Values()) {
      if (directCapture in coder.names:Keys()) {
        capEntry := coder.names[directCapture];

        if (capEntry.t != 'mfunc') {
          if (directCapture in hoistNames) {
            if (capEntry.captures != #[]) {
              innerCoder.names = removeKey(innerCoder.names, directCapture);
            }
          }
        }
      }
    }

    bodyLines := switch (hoist[1].body[0]) {
      'block' => Block(innerCoder, hoist[1].body);
      'expression' => (
        ['location ' ++ formatLocation(coder.file, hoist[1].body[2])] ++
        Expression(innerCoder, hoist[1].body[1])
      );
    };

    lines ++= bodyLines:map(func(line) => '  ' + line);
    lines ++= ['}'];
  }

  first := hoists:Length() == 0u64;

  for (statement of statements) {
    slines := null;
    [slines, coder] = Statement(coder, statement);

    if (slines:Length() > 0u64) {
      if (!first) {
        lines ++= [''];
      }

      lines ++= ['location ' ++ formatLocation(coder.file, statement.p)];
      lines ++= slines;

      first = false;
    }
  }

  return lines;
};

return Block;
