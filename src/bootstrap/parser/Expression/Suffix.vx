import p from '@/util/parse.vx';

import @/parser/CommaSequence.vx;
import @/parser/Identifier.vx;

import ./DeferExpression.vx;

RawSuffix := p.Select([
  p.Transform(
    p.SequenceOne([
      [p.Exact('.')],
      Identifier,
    ]),
    func([_, name]) => ['.', name],
  ),
  p.Transform(
    p.SequenceOne([
      [p.Exact(':')],
      Identifier,
    ]),
    func([_, name]) => ['methodLookup', name],
  ),
  p.Transform(
    p.SequenceOne([
      [p.Exact('[')],
      DeferExpression,
      [p.Exact(']')],
    ]),
    func(exp) => ['subscript', exp],
  ),
  p.Transform(
    p.SequenceOne([
      [p.Exact('(')],
      CommaSequence(DeferExpression),
      [p.Exact(')')],
    ]),
    func(params) => ['functionCall', params],
  ),
]);

return p.Transform(
  p.DataPos(RawSuffix),
  func({data, pos}) => data ++ [pos],
);
