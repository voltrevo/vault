import @/parser/expressionTypes.vx;
import @/parser/operatorTypes.vx;
import @/util/kinds.vx;
import @/util/Join.vx;

import ./Eval/Eval.vx;
import ./FunctionAndType.vx;
import ./Scope.vx;
import ./Type.vx;

func ExpressionAndType(scope, expression) {
  [xType, data, pos] := expression;

  if (xType == 'literal') {
    return {
      scope,
      expression,
      type: ['literal', expression[1]],
    };
  }

  if (xType == 'identifier') {
    // TODO: When scope tracking is complete, defaulting to Type.any
    // should not be necessary
    // TODO: ... or not... in some cases it may be advantageous to analyze
    // eg functions without capture information, and in these cases we should
    // add any missing names to the scope as they are found so that we can
    // do type inference on them
    type := Scope.lookupDefault(scope, expression[1], Type.any);

    if (type[0] == 'literal') {
      expression = ['literal', type[1], expression[2]];
    }

    return {scope, expression, type};
  }

  if (xType in #[
    'import', 'default', 'op',
  ]) {
    return {
      scope,
      expression,
      type: Type.any, // TODO: More inference here
    };
  }

  if (xType in expressionTypes.operator) {
    if (xType in operatorTypes.mutation) {
      if (xType in #['unary ++', 'unary --']) {
        [target] := data;

        {scope, target} = MutationTarget(scope, target);

        targetType := null;

        {scope, type: targetType, expression: _} = ExpressionAndType(
          scope,
          target
        );

        targetType = Type.Intersection(targetType, ['kinds', kinds.number]);

        if (targetType[0] == 'never') {
          return {
            scope,
            expression: null,
            type: ['never', {
              level: 'error',
              message: (
                'operand of ' ++ xType ++ ' is a ' ++ Type.String(targetType)
              ),
              pos,
              subnotes: [],
              tags: #['type-error'],
            }],
          };
        }

        func inc(x) { x++; return x; };
        func dec(x) { x--; return x; };

        if (targetType[0] == 'literal') {
          targetType[1] = switch (xType) {
            'unary ++' => inc(targetType[1]);
            'unary --' => dec(targetType[1]);
          };
        }

        notes := null;
        {scope, notes} = Mutate(scope, '=', target, targetType);

        return {
          scope,
          expression: switch (notes:Length()) {
            0u64 => [xType, [target], pos];

            // TODO: Inventing an array here to emit multiple notes isn't great
            default => ['array', notes:map(func(n) => ['note', n]), pos];
          },
          type: null,
        };
      }

      [left, right] := data;

      {scope, target: left} = MutationTarget(scope, left);

      if (xType in operatorTypes.compound) {
        op := switch (xType) {
          '**=' => '**';
          '+=' => '+';
          '++=' => '++';
          '-=' => '-';
          '*=' => '*';
          '/=' => '/';
          '%=' => '%';
          '<<=' => '<<';
          '>>=' => '>>';
          '&=' => '&';
          '|=' => '|';
          '^=' => '^';
          '&&=' => '&&';
          '||=' => '||';
          '~=' => '~';
        };

        right = [op, [left, right], right[2]];
        xType = '=';
      }

      right = ExpressionAndType(scope, right);

      if (right.type[0] == 'never') {
        return right;
      }

      scope = right.scope;

      notes := null;
      {scope, notes} = Mutate(scope, xType, left, right.type);

      return {
        scope,
        expression: switch (notes:Length()) {
          0u64 => [xType, [left, right.expression], pos];

          // TODO: Inventing an array here to emit multiple notes isn't great
          default => ['array', notes:map(func(n) => ['note', n]), pos];
        },
        type: null,
      };
    }

    if (xType == 'functionCall') {
      [fn, args] := data;

      fn = ExpressionAndType(scope, fn);
      scopeCapture := scope;
      args = args:map(func(a) => ExpressionAndType(scopeCapture, a));

      for (input of [fn] ++ args) {
        if (input.type[0] == 'never') {
          return input;
        }
      }

      argTypes := args:map(func(a) => a.type);

      res := Eval('functionCall', [
        fn.type,
        argTypes,
      ]);

      if (res.output[0] == 'never') {
        return {
          scope,
          expression: null,
          type: ['never', {
            level: 'error',
            message: (
              'Invalid functionCall: left: ' ++
              Type.String(fn.type) ++
              ', args: ' ++
              switch (args:Length()) {
                0u64 => '(none)';
                default => Join(', ')(argTypes:map(Type.String));
              }
            ),
            pos,
            subnotes: [],
            tags: #['type-error'],
          }],
        };
      }

      if (fn.expression[0] == 'identifier') {
        fn.type = Type.Intersection(fn.type, res.inputs[0]);

        scope = Scope.set(
          scope,
          fn.expression[1],
          fn.type,
        );
      }

      for (i := 0u64; i < args:Length(); i++) {
        if (args[i].expression[0] == 'identifier') {
          args[i].type = Type.Intersection(args[i].type, res.inputs[1][i]);

          scope = Scope.set(
            scope,
            args[i].expression[1],
            args[i].type,
          );
        }
      }

      if (res.output[0] == 'literal') {
        return {
          scope,
          expression: ['literal', res.output[1], pos],
          type: res.output,
        };
      }

      for (i := 0u64; i < args:Length(); i++) {
        if (args[i].type[0] == 'literal') {
          args[i].expression = ['literal', args[i].type[1], args[i].expression[2]];
        }
      }

      return {
        scope,
        expression: ['functionCall',
          [fn.expression, args:map(func(a) => a.expression)],
          pos,
        ],
        type: res.output,
      };
    }

    if (xType in operatorTypes.unary) {
      [target] := data;
      target = ExpressionAndType(scope, target);

      res := Eval(xType, [target.type]);

      if (res.output[0] == 'never') {
        return {
          scope,
          expression: null,
          type: ['never', {
            level: 'error',
            message: (
              'Invalid operand of ' ++
              xType ++
              ': ' ++
              Type.String(target.type)
            ),
            pos,
            subnotes: [],
            tags: #['type-error'],
          }],
        };
      }

      if (target.expression[0] == 'identifier') {
        scope = Scope.update(
          scope,
          target.expression[1],
          Type.Intersection(target.type, res.inputs[0]),
        );
      }

      if (res.output[0] == 'literal') {
        return {
          scope,
          expression: ['literal', res.output[1], pos],
          type: res.output,
        };
      }

      return {
        scope,
        expression: [xType, [target.expression], pos],
        type: res.output,
      };
    }

    scopeCapture := scope;
    [left, right] := data:map(func(sub) => ExpressionAndType(scopeCapture, sub));

    if (left.type[0] == 'never') {
      return left;
    }

    if (right.type[0] == 'never') {
      return right;
    }

    res := Eval(xType, [left.type, right.type]);

    if (res.output[0] == 'never') {
      return {
        scope,
        expression: null,
        type: ['never', {
          level: 'error',
          message: (
            'Invalid operands of ' ++
            xType ++
            ': left: ' ++
            Type.String(left.type) ++
            ', right: ' ++
            Type.String(right.type)
          ),
          pos,
          subnotes: [],
          tags: #['type-error'],
        }],
      };
    }

    for ([i, side] of [left, right]:Entries()) {
      if (side.expression[0] == 'identifier') {
        scope = Scope.update(
          scope,
          side.expression[1],
          Type.Intersection(side.type, res.inputs[i]),
        );
      }
    }

    if (res.output[0] == 'literal') {
      return {
        scope,
        expression: ['literal', res.output[1], pos],
        type: res.output,
      };
    }

    return {
      scope,
      expression: [xType, [left.expression, right.expression], pos],
      type: res.output,
    };
  }

  if (xType in expressionTypes.container) {
    if (xType == 'object') {
      typeData := {};
      literal := {};

      // TODO: fix incorrect unused warning
      for ([i, [key, value]] of data:Entries()) {
        {scope: scopeNext, expression: exp, type} := ExpressionAndType(scope, value);
        scope = scopeNext;

        if (type[0] == 'never') {
          return {scope, expression: null, type};
        }

        if (type[0] != 'literal') {
          literal = null;
        } else if (literal:Kind() != 'null') {
          literal[key] := type[1];
        }

        data[i][1] = exp;
        typeData[key] := type;
      }

      return switch (literal:Kind()) {
        'object' => {
          scope,
          expression: ['literal', literal, pos],
          type: ['literal', literal],
        };

        'null' => {
          scope,
          expression: ['object', data, pos],
          type: ['object', typeData],
        };
      };
    }

    if (xType == 'set') {
      literal := #[];

      elType := ['never', null];

      scopeCapture := scope;
      for ([i, {expression: exp, type}] of data:map(func(sub) => ExpressionAndType(scopeCapture, sub)):Entries()) {
        if (type[0] == 'never') {
          return {scope, expression: null, type};
        }

        if (Type.Kinds(type) == #['func']) {
          return {
            scope,
            expression: null,
            type: ['never', {
              level: 'error',
              message: 'Invalid set element type: ' ++ Type.String(type),
              pos: exp[2],
              subnotes: [],
              tags: #['type-error'],
            }],
          };
        }

        if (type[0] != 'literal') {
          literal = null;
        } else if (literal:Kind() != 'null') {
          literal |= #[type[1]];
        }

        data[i] = exp;
        elType = Type.Union(elType, type);
      }

      return switch (literal:Kind()) {
        'set' => {
          scope,
          expression: ['literal', literal, pos],
          type: ['literal', literal],
        };

        'null' => {
          scope,
          expression: ['set', data, pos],
          type: ['set', elType],
        };
      };
    }

    if (xType == 'array') {
      literal := [];
      typeData := [];

      for ([i, exp] of data:Entries()) {
        type := null;
        {scope, expression: exp, type} = ExpressionAndType(scope, exp);

        if (type[0] == 'never') {
          return {scope, expression: null, type};
        }

        if (type[0] != 'literal') {
          literal = null;
        } else if (literal:Kind() != 'null') {
          literal ++= [type[1]];
        }

        data[i] = exp;
        typeData ++= [type];
      }

      return switch (literal:Kind()) {
        'array' => {
          scope,
          expression: ['literal', literal, pos],
          type: ['literal', literal],
        };

        'null' => {
          scope,
          expression: ['array', data, pos],
          type: ['array', typeData],
        };
      };
    }

    return switch{};
  }

  if (xType in expressionTypes.nameAccess) {
    [base, name] := data;
    base = ExpressionAndType(scope, base);

    if (base.type[0] == 'never') {
      return base;
    }

    if (xType == '.') {
      resType := Eval('subscript', [base.type, ['literal', name]]).output;

      if (resType[0] == 'never') {
        return {
          scope,
          expression: null,
          type: ['never', {
            level: 'error',
            message: (
              '.' ++
              name ++
              ' failed on type ' ++
              Type.String(base.type)
            ),
            pos,
            subnotes: [],
            tags: #['type-error'],
          }],
        };
      }

      return {
        scope,
        expression: ['.', [base.expression, name], pos],
        type: resType,
      };
    }

    if (xType == 'methodLookup') {
      baseKinds := Type.Kinds(base.type);

      baseCapture := base;
      scopeCapture := scope;

      func BadMethod() => {
        scope: scopeCapture,
        expression: null,
        type: ['never', {
          level: 'error',
          message: (
            'Type ' ++
            Type.String(baseCapture.type) ++
            ' does not have method :' ++
            name
          ),
          pos,
          subnotes: [],
          tags: #['type-error'],
        }],
      };

      if (name == 'Kind') {
        baseKindsValues := baseKinds:Values();

        if (baseKindsValues:Length() == 1u64) {
          [kind] := baseKindsValues;

          return {
            scope,
            expression: ['methodLookup', [base.expression, name], pos],
            type: ['func', {args: [], output: ['literal', kind]}],
          };
        }

        return {
          scope,
          expression: ['methodLookup', [base.expression, name], pos],
          type: ['func', {args: [], output: ['kinds', #['string']]}],
        };
      }

      if (name == 'String') {
        if (baseKinds == #['func']) {
          return BadMethod();
        }

        if (base.type[0] == 'literal') {
          return {
            scope,
            expression: ['methodLookup', [base.expression, name], pos],
            type: ['func', {
              args: [],
              output: ['literal', base.type[1]:String()]
            }],
          };
        }

        hasFunc := (
          Type.IntersectKindsDeep(base.type, kinds.all ~ #['func'])[0] ==
          'never'
        );

        outputType := switch (hasFunc) {
          true => ['never', null];
          false => ['kinds', #['string']];
        };

        return {
          scope,
          expression: ['methodLookup', [base.expression, name], pos],
          type: ['func', {args: [], output: outputType}],
        };
      }

      if (name == 'Length') {
        if ((baseKinds & #['string', 'array']) == #[]) {
          return BadMethod();
        }

        return {
          scope,
          expression: ['methodLookup', [base.expression, name], pos],
          type: ['func', {
            args: [],
            output: switch {
              (base.type[0] in #['array', 'literal']) => (
                ['literal', base.type[1]:Length()]
              );

              default => ['kinds', #['u64']];
            },
          }],
        };
      }

      if (name in #[
        'Keys', 'Entries', 'Row', 'Column', 'Transpose',
      ]) {
        if ((baseKinds & #['array', 'object']) == #[]) {
          return BadMethod();
        }

        func KeyType() {
          keyKinds := #[];

          if ('array' in baseKinds) {
            keyKinds |= #['u64'];
          }

          if ('object' in baseKinds) {
            keyKinds |= #['string'];
          }

          return ['kinds', keyKinds];
        };

        if (name == 'Keys') {
          if (base.type[0] in #['array', 'object', 'literal']) {
            return {
              scope,
              expression: ['methodLookup', [base.expression, name], pos],
              type: ['func', {
                args: [],
                output: ['literal', base.type[1]:Keys()],
              }],
            };
          }

          return {
            scope,
            expression: ['methodLookup', [base.expression, name], pos],
            type: ['func', {
              args: [],
              output: ['set', KeyType()],
            }],
          };
        }

        if (name == 'Entries') {
          output := switch {
            (base.type[0] in #['literal']) => (
              ['literal', base.type[1]:Entries()]
            );

            (base.type[0] in #['array', 'object']) => (
              ['array',
                base.type[1]:Entries():map(func([key, valueType]) => (
                  switch (valueType[0]) {
                    'literal' => ['literal', [key, valueType[1]]];

                    default => ['array', [
                      ['literal', key],
                      valueType,
                    ]];
                  }
                )),
              ]
            );

            (base.type[0] in #['array-uniform']) => (
              ['array-uniform',
                ['array', [
                  ['kinds', #['u64']],
                  [base.type[1]],
                ]],
              ]
            );

            (base.type[0] in #['kinds']) => (
              ['array-uniform', ['array', [KeyType(), Type.any]]]
            );
          };

          return {
            scope,
            expression: ['methodLookup', [base.expression, name], pos],
            type: ['func', {args: [], output}],
          };
        }

        if (name == 'Row') {
          return {
            scope,
            expression: ['methodLookup', [base.expression, name], pos],
            type: ['func', {
              args: [],
              output: switch (base.type[0]) {
                'literal' => ['literal', [base.type[1]]];
                default => ['array', [base.type]];
              },
            }],
          };
        }

        if (name in #['Column', 'Transpose']) {
          // TODO: more return type inference

          return {
            scope,
            expression: ['methodLookup', [base.expression, name], pos],
            type: ['func', {args: [], output: ['kinds', #['array', 'object']]}],
          };
        }

        return switch{};
      }

      if (name == 'Values') {
        if ((baseKinds & #['array', 'object', 'set']) == #[]) {
          return BadMethod();
        }

        if (base.type[0] == 'kinds') {
          return {
            scope,
            expression: ['methodLookup', [base.expression, name], pos],
            type: ['func', {args: [], output: ['kinds', #['array']]}],
          };
        }

        if (base.type[0] == 'literal') {
          return {
            scope,
            expression: ['methodLookup', [base.expression, name], pos],
            type: [
              'func',
              {args: [], output: ['literal', base.type[1]:Values()]}
            ],
          };
        }

        if (base.type[0] == 'array') {
          return {
            scope,
            expression: ['methodLookup', [base.expression, name], pos],
            type: ['func', {args: [], output: base.type}],
          };
        }

        if (base.type[0] == 'object') {
          return {
            scope,
            expression: ['methodLookup', [base.expression, name], pos],
            type: ['func', {
              args: [],
              output: ['array', base.type[1]:Values()],
            }],
          };
        }

        if (base.type[0] in #['array-uniform', 'set']) {
          return {
            scope,
            expression: ['methodLookup', [base.expression, name], pos],
            type: ['func', {
              args: [],
              output: ['array-uniform', base.type[1]],
            }],
          };
        }

        return switch{};
      }

      if (name in #['Front', 'Back', 'map', 'reduce']) {
        if (!('array' in baseKinds)) {
          return BadMethod();
        }

        if (name in #['Front', 'Back']) {
          if (base.type[0] == 'kinds') {
            return {
              scope,
              expression: ['methodLookup', [base.expression, name], pos],
              type: ['func', {
                args: [],
                output: Type.any,
              }],
            };
          }

          if (base.type[0] == 'array') {
            return {
              scope,
              expression: ['methodLookup', [base.expression, name], pos],
              type: ['func', {
                args: [],
                output: switch (name) {
                  'Front' => base.type[1]:Front();
                  'Back' => base.type[1]:Back();
                },
              }],
            };
          }

          if (base.type[0] == 'array-uniform') {
            return {
              scope,
              expression: ['methodLookup', [base.expression, name], pos],
              type: ['func', {
                args: [],
                output: base.type[1],
              }],
            };
          }

          if (base.type[0] == 'literal') {
            if (base.type[1]:Length() == 0u64) {
              return {
                scope,
                expression: ['methodLookup', [base.expression, name], pos],
                type: ['func', {
                  args: [],
                  output: ['never', {
                    level: 'error',
                    message: 'Can\'t access :' ++ name ++ '() of empty array',
                    pos,
                    subnotes: [],
                    tags: #['type-error'],
                  }],
                }],
              };
            }

            return {
              scope,
              expression: ['methodLookup', [base.expression, name], pos],
              type: ['func', {
                args: [],
                output: switch (name) {
                  'Front' => base.type[1]:Front();
                  'Back' => base.type[1]:Back();
                },
              }],
            };
          }

          return switch{};
        }

        if (name == 'map') {
          // TODO: Element typing of the array output depends on the mapper
          // function passed in, which is inaccessible from here and requires
          // more context. It might be worth specializing on :map() expressions
          // rather than simply :map being done here, which doesn't necessarily
          // know that it's going to be immediately called.

          if (base.type[0] == 'kinds') {
            return {
              scope,
              expression: ['methodLookup', [base.expression, name], pos],
              type: ['func', {
                args: [['func', {
                  args: [Type.any],
                  output: Type.any,
                }]],
                output: ['kinds', #['array']],
              }],
            };
          }

          if (base.type[0] in #['array', 'literal']) {
            if (base.type[1]:Length() == 0u64) {
              return {
                scope,
                expression: ['methodLookup', [base.expression, name], pos],
                type: ['func', {
                  args: [['func', {
                    args: [Type.any],
                    output: Type.any,
                  }]],
                  output: ['literal', []],
                }],
              };
            }

            elType := switch (base.type[0]) {
              'array' => base.type[1]:reduce(Type.Union);

              'literal' => (base.type[1]
                :map(func(v) => ['literal', v])
                :reduce(Type.Union)
              );
            };

            return {
              scope,
              expression: ['methodLookup', [base.expression, name], pos],
              type: ['func', {
                args: [['func', {
                  args: [elType],
                  output: Type.any,
                }]],
                output: ['array', base.type[1]:map(func(_) => Type.any)],
              }],
            };
          }

          if (base.type[0] == 'array-uniform') {
            return {
              scope,
              expression: ['methodLookup', [base.expression, name], pos],
              type: ['func', {
                args: [['func', {
                  args: [base.type[1]],
                  output: Type.any,
                }]],
                output: ['array-uniform', Type.any],
              }],
            };
          }

          return switch{};
        }

        if (name == 'reduce') {
          // TODO: Similar to :map, it might be worth specializing on
          // :reduce().

          if (base.type[0] == 'kinds') {
            return {
              scope,
              expression: ['methodLookup', [base.expression, name], pos],
              type: ['func', {
                args: [['func', {
                  args: [Type.any, Type.any],
                  output: Type.any,
                }]],
                output: Type.any,
              }],
            };
          }

          if (base.type[0] in #['array', 'literal']) {
            if (base.type[1]:Length() == 0u64) {
              return {
                scope,
                expression: ['methodLookup', [base.expression, name], pos],
                type: ['func', {
                  args: [['func', {
                    args: [Type.any, Type.any],
                    output: Type.any,
                  }]],
                  output: ['never', {
                    level: 'error',
                    message: 'Can\'t :reduce on an empty array',
                    pos,
                    subnotes: [],
                    tags: #['type-error'],
                  }],
                }],
              };
            }

            elType := switch (base.type[0]) {
              'array' => base.type[1]:reduce(Type.Union);

              'literal' => (base.type[1]
                :map(func(v) => ['literal', v])
                :reduce(Type.Union)
              );
            };

            if (base.type[1]:Length() == 1u64) {
              return {
                scope,
                expression: ['methodLookup', [base.expression, name], pos],
                type: ['func', {
                  args: [['func', {
                    // TODO: Is the reducer actually required to accept elType
                    // if it's already just one value and the reducer never
                    // actually gets called? This is also relevant to the
                    // array-uniform case!
                    args: [elType, elType],
                    output: Type.any,
                  }]],
                  output: elType,
                }],
              };
            }

            return {
              scope,
              expression: ['methodLookup', [base.expression, name], pos],
              type: ['func', {
                args: [['func', {
                  args: [elType, elType],
                  output: Type.any,
                }]],
                output: Type.any,
              }],
            };
          }

          if (base.type[0] == 'array-uniform') {
            return {
              scope,
              expression: ['methodLookup', [base.expression, name], pos],
              type: ['func', {
                args: [['func', {
                  args: [base.type[1], base.type[1]],
                  output: Type.any,
                }]],
                output: Type.any,
              }],
            };
          }

          return switch{};
        }

        return switch{};
      }

      if (name == 'bind') {
        if (!('func' in baseKinds)) {
          return BadMethod();
        }

        if (base.type[0] == 'kinds') {
          return {
            scope,
            expression: ['methodLookup', [base.expression, name], pos],
            type: ['func', {
              args: [Type.any],
              output: ['kinds', #['func']],
            }],
          };
        }

        if (base.type[0] == 'func') {
          if (base.type[1].args:Length() == 0u64) {
            output := ['never', {
              level: 'error',
              message: (
                'Can\'t bind function that doesn\'t take any arguments: ' ++
                Type.String(base.type)
              ),
              pos,
              subnotes: [],
              tags: #['type-error'],
            }];

            return {
              scope,
              expression: ['methodLookup', [base.expression, name], pos],
              type: ['func', {args: [output], output}],
            };
          }

          args := [base.type[1].args[0]];

          nextArgs := [];

          // TODO: Really need to add slice operations
          for (i := 1u64; i < base.type[1].args:Length(); i++) {
            nextArgs ++= [base.type[1].args[i]];
          }

          return {
            scope,
            expression: ['methodLookup', [base.expression, name], pos],
            type: ['func', {
              args,
              output: ['func', {
                args: nextArgs,
                output: base.type[1].output,
              }],
            }],
          };
        }

        return switch{};
      }

      return BadMethod();
    }

    return switch{};
  }

  if (xType == 'switch') {
    {test, cases} := data;

    resType := ['never', null];

    if (test[0] != 'nothing') {
      test = ExpressionAndType(scope, test);

      if (test.type[0] == 'never') {
        return test;
      }
    } else {
      test = {
        expression: test,
        type: null,
      };
    }

    newCases := [];

    for ([left, right] of cases) {
      right = ExpressionAndType(scope, right);

      if (right.type[0] == 'never') {
        return right;
      }

      if (left[0] == 'default') {
        newCases ++= [[left, right.expression]];
        resType = Type.Union(resType, right.type);

        // TODO: Errors from unreachable cases might still be valuable. How
        // should they be surfaced?
        break;
      }

      left = ExpressionAndType(scope, left);

      if (left.type[0] == 'never') {
        return left;
      }

      specType := switch (test.expression[0]) {
        'nothing' => left.type;
        default => Eval('==', [test.type, left.type]).output;
      };

      if (specType[0] == 'never') {
        return {
          scope,
          expression: null,
          type: ['never', {
            level: 'error',
            message: (
              'Incompatible types in switch comparison: test: ' ++
              Type.String(test.type) ++
              ', case: ' ++
              Type.String(left.type)
            ),
            pos: left.expression[2],
            subnotes: [],
            tags: #['type-error'],
          }],
        };
      }

      if (!('bool' in Type.Kinds(specType))) {
        return {
          scope,
          expression: null,
          type: ['never', {
            level: 'error',
            message: 'Non-bool test case: ' ++ Type.String(specType),
            pos: left.expression[2],
            subnotes: [],
            tags: #['type-error'],
          }],
        };
      }

      if (specType[0] == 'literal') {
        if (specType[1]) {
          newCases ++= [[
            ['default', null, left.expression[2]],
            right.expression,
          ]];

          resType = Type.Union(resType, right.type);

          break;
        } else {
          // Don't include unreachable case (TODO: warn?)
        }
      } else {
        newCases ++= [[left.expression, right.expression]];
        resType = Type.Union(resType, right.type);
      }
    }

    cases = newCases;

    if (cases:Length() == 1u64) {
      [[[leftType, _, _], right]] := cases;
      if (leftType == 'default') {
        return {scope, expression: right, type: resType};
      }
    }

    return {
      scope,
      expression: ['switch', {test: test.expression, cases}, pos],
      type: resType,
    };
  }

  if (xType == 'func') {
    return {scope} ++ FunctionAndType(scope, expression);
  }

  return switch{};
};

func Mutate(scope, xType, target, srcType) {
  if (target[0] in #['array', 'object']) {
    notes := [];

    entries := switch (target[0]) {
      'array' => target[1]:Entries();
      'object' => target[1];
    };

    for ([key, subTarget] of entries) {
      subSrcType := Eval('subscript', [srcType, ['literal', key]]).output;
      subNotes := [];

      {scope, notes: subNotes} = Mutate(
        scope,
        xType,
        subTarget,
        subSrcType,
      );

      notes ++= subNotes;
    }

    return {scope, notes};
  }

  if (target[0] == 'identifier') {
    if (target[1] != '_') {
      scope = switch (xType) {
        ':=' => Scope.add(scope, target[1], srcType);
        '=' => Scope.set(scope, target[1], srcType);
      };
    }

    return {scope, notes: []};
  }

  return switch (xType) {
    '=' => MutateAccess(scope, target, srcType);
    ':=' => MutateInsert(scope, target, srcType);
  };
};

func MutateInsert(scope, target, srcType) {
  [subTarget, key] := target[1];

  keyType := switch (target[0]) {
    '.' => ['literal', key];
    'subscript' => ExpressionAndType(scope, key).type;
  };

  keyKinds := Type.Kinds(keyType);

  subTargetType := ExpressionAndType(scope, subTarget).type;
  subTargetKinds := Type.Kinds(subTargetType);

  subTargetTypeCapture := subTargetType;

  func BadInsert() => {
    scope,
    notes: [{
      level: 'error',
      message: (
        'Can\'t insert ' ++
        Type.String(keyType) ++
        ' into ' ++
        Type.String(subTargetTypeCapture)
      ),
      pos: target[2],
      subnotes: [],
      tags: #['mutation', 'subscript', 'insertion'],
    }],
  };

  if (!('string' in keyKinds) || !('object' in subTargetKinds)) {
    return BadInsert();
  }

  if (!(subTargetType[0] in #['literal', 'object'])) {
    return {scope, notes: []};
  }

  if (keyType[0] != 'literal') {
    return MutateAccess(scope, subTarget, ['kinds', #['object']]);
  }

  if (keyType[1] in subTargetType[1]:Keys()) {
    return BadInsert();
  }

  if (subTargetType[0] == 'literal') {
    if (srcType[0] == 'literal') {

      subTargetType[1][keyType[1]] := srcType[1];
      return MutateAccess(scope, subTarget, subTargetType);
    }

    subTargetType = Type.demoteObjectLiteral(subTargetType);
  }

  subTargetType[1][keyType[1]] := srcType;
  return MutateAccess(scope, subTarget, subTargetType);
};

func MutateAccess(scope, target, srcType) {
  if (target[0] == 'identifier') {
    return {
      scope: Scope.update(scope, target[1], srcType),
      notes: [],
    };
  }

  [subTarget, key] := target[1];

  keyType := switch (target[0]) {
    '.' => ['literal', key];
    'subscript' => ExpressionAndType(scope, key).type;
  };

  keyKinds := Type.Kinds(keyType);

  subTargetType := ExpressionAndType(scope, subTarget).type;
  subTargetKinds := Type.Kinds(subTargetType);

  allowedSubTargetKinds := #[];

  if ((keyKinds & #['i32', 'u64']) != #[]) {
    allowedSubTargetKinds |= #['array'];
  }

  if ('string' in keyKinds) {
    allowedSubTargetKinds |= #['object'];
  }

  subTargetTypeCapture := subTargetType;

  func BadSubscript() => {
    scope,
    notes: [{
      level: 'error',
      message: (
        'Cannot subscript ' ++
        Type.String(subTargetTypeCapture) ++
        ' with ' ++
        Type.String(keyType)
      ),
      pos: target[2],
      subnotes: [],
      tags: #['mutation', 'subscript'],
    }],
  };

  if ((subTargetKinds & allowedSubTargetKinds) == #[]) {
    return BadSubscript();
  }

  if (!(subTargetType[0] in #['literal', 'array', 'array-uniform', 'object'])) {
    return {scope, notes: []};
  }

  if (subTargetType[0] == 'array-uniform') {
    subTargetType[1] = Type.Union(subTargetType[1], srcType);
    return MutateAccess(scope, subTarget, subTargetType);
  }

  if (keyType[0] != 'literal') {
    if (subTargetType[0] == 'literal') {
      subTargetType = switch (subTargetType[1]:Kind()) {
        'array' => Type.demoteArrayLiteral(subTargetType);
        'object' => Type.demoteObjectLiteral(subTargetType);
      };
    }

    for (k of subTargetType[1]:Keys():Values()) {
      subTargetType[1][k] = Type.Union(subTargetType[1][k], srcType);
    }

    return MutateAccess(scope, subTarget, subTargetType);
  }

  indexValue := keyType[1];

  if (indexValue:Kind() == 'i32') {
    if (indexValue < 0) {
      return BadSubscript();
    }

    next := 0u64;

    // TODO: Fix this bad i32->u64 conversion
    for (i := 0; i < indexValue; i++) {
      next++;
    }

    indexValue = next;
  }

  if (!(indexValue in subTargetType[1]:Keys())) {
    return BadSubscript();
  }

  if (subTargetType[0] == 'literal') {
    if (srcType[0] == 'literal') {
      subTargetType[1][keyType[1]] = srcType[1];
      return MutateAccess(scope, subTarget, subTargetType);
    }

    subTargetType = switch (subTargetType[1]:Kind()) {
      'array' => Type.demoteArrayLiteral(subTargetType);
      'object' => Type.demoteObjectLiteral(subTargetType);
    };
  }

  subTargetType[1][keyType[1]] = srcType;
  return MutateAccess(scope, subTarget, subTargetType);
};

func MutationTarget(scope, target) => switch (target[0]) {
  'identifier' => {scope, target};
  'array' => DestructureMutationTarget(scope, target);
  'object' => DestructureMutationTarget(scope, target);
  '.' => AccessMutationTarget(scope, target);
  'subscript' => AccessMutationTarget(scope, target);
};

func AccessMutationTarget(scope, target) {
  [type, data, pos] := target;

  assert type in #['.', 'subscript'];

  [subTarget, index] := data;

  if (type == 'subscript') {
    {scope, expression: index, type: _} = ExpressionAndType(scope, index);
  } else if (type == '.') {
    // Nothing to do
  } else {
    assert false;
  }

  {scope, target: subTarget} = MutationTarget(scope, subTarget);

  return {scope, target: [type, [subTarget, index], pos]};
};

func DestructureMutationTarget(scope, target) {
  [type, data, pos] := target;

  if (type == 'array') {
    newData := [];

    for (el of data) {
      {scope, target: el} = MutationTarget(scope, el);
      newData ++= [el];
    }

    return {scope, target: [type, newData, pos]};
  }

  if (type == 'object') {
    newData := [];

    for ([key, el] of data) {
      {scope, target: el} = MutationTarget(scope, el);
      newData ++= [[key, el]];
    }

    return {scope, target: [type, newData, pos]};
  }

  return switch{};
};

return ExpressionAndType;
