import ./Block.vx;
import ./Expression.vx;

func Statement([type, data, pos]) {
  if (type in #['return', 'assert', 'log.info', 'log.warn', 'log.error']) {
    return [type, Expression(data), pos];
  }

  if (type == 'if') {
    {condition, body, tail} := data;

    condition = Expression(condition);
    body = Block(body);

    tail = switch (tail[0]) {
      'nothing' => tail;
      'block' => Block(tail);
      'if' => Statement(tail);
    };

    return [type, {condition, body, tail}, pos];
  }

  if (type == 'for') {
    {control: [controlType, controlData, controlPos], body} := data;

    if (controlType == 'condition') {
      controlData = Expression(controlData);
    } else if (controlType == 'traditional') {
      {setup, condition, next} := controlData;
      setup = Expression(setup);
      condition = Expression(condition);
      next = Expression(next);
      controlData = {setup, condition, next};
    } else if (controlType == 'range') {
      {element, container} := controlData;
      container = Expression(container);
      controlData = {element, container};
    } else if (controlType == 'nothing') {
      // Nothing to do
    } else {
      assert false;
    }

    body = Block(body);

    return [
      type,
      {control: [controlType, controlData, controlPos], body},
      pos
    ];
  }

  if (type == 'expression') {
    return [type, Expression(data), pos];
  }

  assert type in #['break', 'continue', 'note', 'import', 'breakpoint'];
  return [type, data, pos];
};

return Statement;
