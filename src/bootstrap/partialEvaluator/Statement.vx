import ./Argument.vx;
import ./Block.vx;
import ./Expression.vx;
import ./KindSet.vx;
import ./KindsString.vx;
import ./Scope.vx;
import ./Type.vx;

func Statement(scope, [type, data, pos]) {
  if (type in #['return', 'assert', 'log.info', 'log.warn', 'log.error']) {
    expression := null;
    {scope, expression} = Expression(scope, data);
    return {scope, statement: [type, expression, pos]};
  }

  if (type == 'if') {
    {condition, body, tail} := data;

    {scope, expression: condition} = Expression(scope, condition);

    if (condition[0] == 'note') {
      return {scope, statement: condition};
    }

    conditionKinds := KindSet(condition);

    if (!('bool' in conditionKinds)) {
      return {
        scope,
        statement: NonBoolConditionNote(condition, conditionKinds),
      };
    }

    if (condition[0] == 'literal' && condition[1]:Kind() == 'bool') {
      if (condition[1]) {
        {scope, block: body} = Block(scope, body);
        tail = ['nothing', null, tail[2]];

        return {
          scope,
          statement: [type, {condition, body, tail}, pos],
        };

        // TODO: Still analyze tail? Warn about unreachable code?
      }

      return switch (tail[0]) {
        'nothing' => {scope, statement: null};
        'block' => ScopeBlock(scope, tail[1]);
        'if' => Statement(tail);
      };
    }

    bodyScope := null;
    tailScope := null;
    {scope: bodyScope, block: body} = Block(scope, body);

    if (tail[0] == 'nothing') {
      tailScope = scope;
    } else if (tail[0] == 'block') {
      {scope: tailScope, block: tail} = Block(scope, tail);
    } else if (tail[0] == 'if') {
      {scope: tailScope, statement: tail} = Statement(scope, tail);
    } else {
      assert false;
    }

    return {
      scope: Scope.combine(bodyScope, tailScope, Type.Union),
      statement: [type, {condition, body, tail}, pos],
    };
  }

  if (type == 'for') {
    scope = Scope.push(scope);
    {control: [controlType, controlData, controlPos], body} := data;

    if (controlType == 'condition') {
      {scope, expression: controlData} = Expression(scope, controlData);
      condition := controlData;

      conditionKinds := KindSet(condition);

      if (!('bool' in conditionKinds)) {
        return {
          scope: Scope.pop(scope),
          statement: NonBoolConditionNote(condition, conditionKinds),
        };
      }

      if (condition[0] == 'literal' && condition[1]:Kind() == 'bool') {
        if (condition[1]) {
          controlType = 'nothing';
          controlData = null;
        } else {
          return {scope, statement: ['expression', controlData, pos]};
        }
      }
    } else if (controlType == 'traditional') {
      {setup, condition, next: _} := controlData;

      {scope, expression: setup} = Expression(scope, setup);
      {scope: _, expression: condition} = Expression(scope, condition);

      conditionKinds := KindSet(condition);

      if (!('bool' in conditionKinds)) {
        return {
          scope: Scope.pop(scope),
          statement: NonBoolConditionNote(condition, conditionKinds),
        };
      }

      if (condition[0] == 'literal' && condition[1]:Kind() == 'bool') {
        if (!condition[1]) {
          // Only interested in the possibility of this being an exception
          return ScopeBlock(scope, [['expression', setup, setup[2]]]);
        }
      }

      // setup is the only one we can actually update since the other parts
      // will run under different scopes / not exactly once
      controlData.setup = setup;
    } else if (controlType == 'range') {
      {element, container} := controlData;

      // TODO: Use type information from container to narrow the element type
      scope = Argument(scope, element);

      {scope, expression: container} = Expression(
        scope,
        container,
      );

      containerKinds := KindSet(container);

      if (!('array' in containerKinds)) {
        return {
          scope: Scope.pop(scope),
          statement: ['note', {
            level: 'error',
            message: (
              'Container of for control clause needs to be an array but ' ++
              'instead is a ' ++
              KindsString(containerKinds)
            ),
            pos: container[2],
            subnotes: [],
            tags: #['type-error', 'non-array-container'],
          }],
        };
      }

      if (container[0] == 'literal' && container[1]:Kind() == 'array') {
        if (container[1]:Length() == 0u64) {
          return {scope, statement: null};
        }

        // TODO: Loop unrolling for small arrays? Includes array expressions,
        // not just literals.
      }

      controlData = {element, container};
    } else if (controlType == 'nothing') {
      // Nothing to do
    } else {
      assert false;
    }

    cap := {body, controlData, controlType};

    func NextScope(forScope) {
      forScope = Block(forScope, cap.body).scope;

      if (cap.controlType == 'condition') {
        forScope = Scope.combine(
          forScope,
          Expression(forScope, cap.controlData).scope,
          Type.Union,
        );
      } else if (cap.controlType == 'traditional') {
        forScope0 := forScope;

        // TODO: Disallow break/return in controlData.next? Otherwise need
        // another branch here
        forScope = Expression(forScope, cap.controlData.next).scope;
        forScope = Expression(forScope, cap.controlData.condition).scope;

        forScope = Scope.combine(forScope0, forScope, Type.Union);
      }

      return forScope;
    };

    for (i := 0; true; i++) {
      nextScope := NextScope(scope);

      if (i > 2) {
        log.info {scope, body, ouput: Block(scope, body).scope};
        assert false;
      }

      if (nextScope in #[scope]) {
        break;
      }

      if (i == 7) {
        // TODO: Need to widen types as needed to accommodate the operations
        // of the loop. This is not yet implemented, halting instead.
        log.info {scope, nextScope};
        assert false;
      }

      scope = Scope.combine(scope, nextScope, Type.Union);
    }

    body = Block(scope, body).block;
    scope = Scope.pop(scope);

    return {
      scope,
      statement: [
        'for',
        {control: [controlType, controlData, controlPos], body},
        pos
      ],
    };
  }

  if (type == 'expression') {
    expression := null;
    {scope, expression} = Expression(scope, data);
    return {scope, statement: [type, expression, pos]};
  }

  if (type == 'import') {
    return {
      scope: Scope.add(scope, data.name[1], Type.Any),
      statement: [type, data, pos],
    };
  }

  assert type in #['break', 'continue', 'note', 'breakpoint'];
  return {scope, statement: [type, data, pos]};
};

func NonBoolConditionNote(condition, conditionKinds) {
  return ['note', {
    level: 'error',
    message: (
      'Condition needs to be a bool but instead is a ' ++
      KindsString(conditionKinds)
    ),
    pos: condition[2],
    subnotes: [],
    tags: #['type-error', 'non-bool-condition'],
  }];
};

func ScopeBlock(scope, statements) {
  assert statements:Length() > 0u64;

  pos := [statements:Front()[2][0], statements:Back()[2][1]];

  block := null;
  {scope, block} = Block(scope, ['block', statements, pos]);

  return {
    scope,
    statement: ['if', {
      condition: ['literal', true, pos],
      body: block,
      tail: ['nothing', null, pos],
    }, pos]
  };
};

return Statement;
