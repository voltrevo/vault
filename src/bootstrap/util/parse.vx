import ./parse.vx;

func NonEmptyLine(lines, [i, j]) {
  if (i >= lines:Length()) {
    return null;
  }

  line := lines[i];

  if (j >= line:Length()) {
    return null;
  }

  return line;
};

func ExactChar(c) => func(lines, [i, j]) {
  line := NonEmptyLine(lines, [i, j]);

  // TODO: Short-circuit || so that the following two conditions can be
  // combined.
  if (line:Kind() == 'null') {
    return null;
  }

  if (line[j] != c) {
    return null;
  }

  return [c, [i, j + 1u64]];
};

return {
  Nothing: func(_, pos) => [['nothing', null, [pos, pos]], pos],

  Sequence: func(parsers) => func(lines, pos) {
    res := [];

    for (parser of parsers) {
      keep := parser:Kind() != 'array';

      if (!keep) {
        [parser] = parser;
      }

      output := parser(lines, pos);

      if (output:Kind() == 'null') {
        return null;
      }

      value := null;
      [value, pos] = output;

      if (keep) {
        res ++= [value];
      }
    }

    return [res, pos];
  },

  SequenceOne: func(parsers) => func(lines, pos) {
    output := parse.Sequence(parsers)(lines, pos);

    if (output:Kind() == 'null') {
      return null;
    }

    [output[0]] = output[0];

    return output;
  },

  Repeat: func(parser, range) => func(lines, pos) {
    res := [];

    min := range:Front();
    max := null;

    if (range:Length() > 1u64) {
      max = range[1u64];
      assert range:Length() == 2u64;
    }

    count := 0u64;

    for {
      output := parser(lines, pos);

      if (output:Kind() == 'null') {
        break;
      }

      value := null;
      [value, pos] = output;

      res ++= [value];
      count++;

      // TODO: Short-circuit boolean operators
      if (max:Kind() != 'null') {
        if (count == max) {
          break;
        }
      }
    }

    if (count < min) {
      return null;
    }

    return [res, pos];
  },

  Optional: func(parser) => parse.Repeat(parser, [0u64, 1u64]),
  Many: func(parser) => parse.Repeat(parser, [0u64, null]),

  Select: func(parsers) => func(lines, pos) {
    for (parser of parsers) {
      output := parser(lines, pos);

      if (output:Kind() != 'null') {
        return output;
      }
    }

    return null;
  },

  Exact: func(str) => switch {
    (str:Length() == 1u64) => ExactChar(str);

    true => func(lines, [i, j]) {
      if (i >= lines:Length()) {
        return null;
      }

      line := lines[i];
      lineLen := line:Length();

      jLimit := j + str:Length();

      if (jLimit > lineLen) {
        return null;
      }

      strPos := 0u64;

      for (j < jLimit) {
        if (line[j] != str[strPos]) {
          return null;
        }

        j++;
        strPos++;
      }

      return [str, [i, j]];
    };
  },

  SelectExact: func(strs) {
    table := {};
    leaders := #[];

    for (str of strs) {
      c := str[0];

      if (c in leaders) {
        table[c] ++= [str];
      } else {
        table[c] := [str];
        leaders |= #[c];
      }
    }

    tableCap := table;
    leadersCap := leaders;

    return func(lines, [i, j]) {
      if (i >= lines:Length()) {
        return null;
      }

      line := lines[i];
      lineLen := line:Length();

      if (j >= lineLen) {
        return null;
      }

      leader := line[j];

      if (!(leader in leadersCap)) {
        return null;
      }

      jStart := j;

      for (str of tableCap[leader]) {
        j = jStart;
        jLimit := j + str:Length();

        if (jLimit <= lineLen) {
          strPos := 1u64;
          j++; // Already checked leader char

          for (j < jLimit) {
            if (line[j] != str[strPos]) {
              break;
            }

            j++;
            strPos++;
          }

          if (j == jLimit) {
            return [str, [i, j]];
          }
        }
      }

      return null;
    };
  },

  DataPos: func(parser) => func(lines, pos) {
    output := parser(lines, pos);

    if (output:Kind() == 'null') {
      return null;
    }

    [data, posNext] := output;

    return [{data, pos: [pos, posNext]}, posNext];
  },

  Complete: func(parser) => func(lines) {
    output := parser(lines, [0u64, 0u64]);

    if (output:Kind() == 'null') {
      return null;
    }

    [result, [i, j]] := output;

    if (
      (i == lines:Length() && j == 0u64) ||
      (i == lines:Length() - 1u64 && j == lines:Back():Length())
    ) {
      return result;
    }

    return null;
  },

  Transform: func(parser, transform) => func(lines, pos) {
    output := parser(lines, pos);

    if (output:Kind() == 'null') {
      return null;
    }

    output[0] = transform(output[0]);

    return output;
  },

  Char: func(lines, [i, j]) {
    if (i >= lines:Length()) {
      return null;
    }

    line := lines[i];

    if (j == line:Length()) {
      newline := '
';

      return [newline, [i + 1u64, 0u64]];
    }

    assert j < line:Length();

    return [line[j], [i, j + 1u64]];
  },

  Filter: func(parser, filter) => func(lines, pos) {
    output := parser(lines, pos);

    if (output:Kind() == 'null') {
      return null;
    }

    if (!filter(output[0])) {
      return null;
    }

    return output;
  },

  Label: func(name, parser) => (
    parse.Transform(parser, func(res) => [name, res])
  ),

  Whitespace: func(lines, [i, j]) {
    empty := true;

    if (i >= lines:Length()) {
      return null;
    }

    line := lines[i];

    for {
      for (j >= line:Length()) {
        empty = false;
        i++;
        j = 0u64;

        if (i >= lines:Length()) {
          return [['whitespace', null], [i, j]];
        }

        line = lines[i];
      }

      if (!(line[j] in #[' ', '	'])) {
        return switch (empty) {
          true => null;
          false => [['whitespace', null], [i, j]];
        };
      }

      empty = false;
      j++;
    }
  },

  OW: func(lines, [i, j]) {
    if (i >= lines:Length()) {
      return [['ow', null], [i, j]];
    }

    line := lines[i];

    for {
      for (j >= line:Length()) {
        i++;
        j = 0u64;

        if (i >= lines:Length()) {
          return [['ow', null], [i, j]];
        }

        line = lines[i];
      }

      if (!(line[j] in #[' ', '	'])) {
        return [['ow', null], [i, j]];
      }

      j++;
    }
  },

  End: func(lines, [i, j]) {
    if (j == 0u64 && i == lines:Length()) {
      return [['end', null, [[i, j], [i, j]]], [i, j]];
    }

    return null;
  },

  Peek: func(parser) => func(lines, pos) {
    output := parser(lines, pos);

    if (output:Kind() == 'null') {
      return null;
    }

    return [output[0], pos];
  },

  Not: func(parser) => func(lines, pos) {
    output := parser(lines, pos);

    if (output:Kind() == 'null') {
      return [null, pos];
    }

    return null;
  },
};
