import @/files.vx;
import @/util/Join.vx;
import @/util/kinds.vx;

import ./ByteCoder.vx;
import ./Expression.vx;

return {
  indent: func(line) => '  ' ++ line,

  create: func(file) {
    return {
      file,
      dir: files.Dir(file),
      names: {},
      internalNames: {},
    };
  },

  setGFunc: func(coder, name, captures) {
    coder.names[name] := {t: 'gfunc', captures};
    return coder;
  },

  setMFunc: func(coder, name, fullName) {
    coder.names[name] := {t: 'mfunc', fullName};
    return coder;
  },

  getName: func(coder, name) {
    if (!(name in coder.names:Keys())) {
      return ['get $' ++ name];
    }

    entry := coder.names[name];

    return switch (entry.t) {
      'gfunc' => (func() {
        if (entry.captures == #[]) {
          return ['func { gcall $' ++ name ++ ' }'];
        }

        lines := ['func { gcall $.captureless.' ++ name ++ ' }'];

        for (capture of entry.captures:Values()) {
          getNameLines := ByteCoder.getName(coder, capture);

          lines ++= switch (getNameLines:Length()) {
            1u64 => [getNameLines[0] ++ ' bind'];
            default => getNameLines ++ ['bind'];
          };
        }

        return lines;
      })();

      'mfunc' => ['mcall $' ++ entry.fullName];
    };
  },

  getInternalName: func(coder, name) {
    if (!(name in coder.internalNames:Keys())) {
      coder.internalNames[name] := 0;
    }

    resName := '.' ++ name ++ coder.internalNames[name]:String();
    coder.internalNames[name]++;

    return [resName, coder];
  },

  Set: func(name) => switch (name) {
    '_' => 'discard';
    default => 'set $' ++ name;
  },

  UpdateInsert: func(coder, target, rhsCode, kind) {
    if (target[0] == 'identifier') {
      return switch (rhsCode:Length()) {
        1u64 => [rhsCode[0] ++ ' ' ++ ByteCoder.Set(target[1])];
        default => rhsCode ++ [ByteCoder.Set(target[1])];
      };
    }

    prefix := [];
    suffix := [];

    first := true;

    for {
      if (target[0] in #['subscript', '.']) {
        [nextTarget, key] := target[1];

        if (first) {
          first = false;

          prefix = (
            switch (target[0]) {
              'subscript' => Expression(coder, key);
              '.' => [key:String()];
            } ++
            prefix
          );
        } else {
          if (target[0] == 'subscript') {
            if (ByteCoder.shouldUseTemporary(key)) {
              tempName := null;
              [tempName, coder] = ByteCoder.getInternalName(coder, 'key');
              prefix = ['dup get $' ++ tempName ++ ' at'] ++ prefix;
              prefix = Expression(coder, key) ++ [ByteCoder.Set(tempName)] ++ prefix;
              suffix ++= ['get $' ++ tempName ++ ' swap update'];
            } else {
              keyCode := Join(' ')(Expression(coder, key));
              prefix = ['dup ' ++ keyCode ++ ' at'] ++ prefix;
              suffix ++= [keyCode ++ ' swap update'];
            }
          } else {
            prefix = ['dup ' ++ key:String() ++ ' at'] ++ prefix;
            suffix ++= [key:String() ++ ' swap update'];
          }
        }

        if (nextTarget[0] == 'identifier') {
          return (
            ['get $' ++ nextTarget[1]] ++
            prefix ++
            rhsCode ++
            [kind] ++
            suffix ++
            [ByteCoder.Set(nextTarget[1])]
          );
        }

        target = nextTarget;

        continue;
      }

      break;
    }

    return ['\'Invalid update/insert target\' throw'];
  },

  shouldUseTemporary: func(exp) => switch (exp[0]) {
    'identifier' => false;
    'literal' => !(exp[1]:Kind() in (#['null', 'bool'] | kinds.number));
    default => true;
  },
};
