import ./blackjack.vx;

newline := '
';

func renderCard(card) {
  return card.name ++ card.suit;
};

func renderHand(hand) {
  return (hand
    :map(func(card) => renderCard(card) ++ '  ')
    :reduce(++)
  );
};

func renderOptions(options) {
  len := options:Length();

  res := switch {
    (len == 0) => [''];
    true => ['Options:'];
  };

  for (i := 0; i < 4; i++) {
    if (i < len) {
      res ++= ['  ' ++ options[i]];
    } else {
      res ++= [''];
    }
  }

  res ++= switch {
    (len == 0) => ['Game Over'];
    true => ['What will you do? '];
  };

  return res;
};

func renderScore(hand) {
  score := blackjack.scoreHand(hand);

  return switch {
    (score <= 21) => score:String();
    true => 'BUST';
  };
};

func padLeft(len, str) {
  for (str:Length() < len) {
    str = ' ' ++ str;
  }

  return str;
};

func render({rand, deck, account, bet, playerHand, dealerHand, options}) {
  lines := [
    'Account: $' ++ padLeft(3, account:String()),
    'Bet:     $' ++ padLeft(3, bet:String()),
  ];

  // TODO: This is a hack to suppress the warning for not using rand.
  assert [rand, deck]:Length() == 2;

  optionsStr := options:String();

  finished := optionsStr == '[]' || optionsStr == '[\'next\']';

  if (finished) {
    lines ++= ['', 'Dealer hand: ' ++ renderHand(dealerHand)];
  } else {
    lines ++= ['', 'Dealer hand: ' ++ renderCard(dealerHand[0]) ++ '  ??'];
  }

  lines ++= ['Your hand:   ' ++ renderHand(playerHand)];

  if (finished) {
    lines ++= [
      '',
      'Your score:   ' ++ renderScore(playerHand),
      'Dealer score: ' ++ renderScore(dealerHand),
      '',
    ];

    betStr := '  $' ++ bet:String();

    lines ++= switch (blackjack.WinLossTie(playerHand, dealerHand)) {
      'win' => ['====> WIN <====', betStr ++ ' added'];
      'loss' => ['====> LOSS <====', betStr ++ ' deducted'];
      'tie' => ['====> TIE <====', ''];
    };
  } else {
    lines ++= ['', '', '', '', '', ''];
  }

  lines ++= [''];
  lines ++= renderOptions(options);

  msg := lines:reduce(func(acc, next) => acc ++ newline ++ next);

  return msg;
};

return render;
