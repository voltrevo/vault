import ./parse.vx;

func NonEmptyLine(lines, [i, j]) {
  if (i >= lines:Length()) {
    return null;
  }

  line := lines[i];

  if (j >= line:Length()) {
    return null;
  }

  return line;
};

func ExactChar(c) => func(lines, [i, j]) {
  line := NonEmptyLine(lines, [i, j]);

  // TODO: Short-circuit || so that the following two conditions can be
  // combined.
  if (line:Kind() == 'null') {
    return null;
  }

  if (line[j] != c) {
    return null;
  }

  return [c, [i, j + 1u64]];
};

return {
  Sequence: func(parsers) => func(lines, [i, j]) {
    res := [];

    for (parser of parsers) {
      output := parser(lines, [i, j]);

      if (output:Kind() == 'null') {
        return null;
      }

      value := null;
      [value, [i, j]] = output;

      res ++= [value];
    }

    return [res, [i, j]];
  },

  Repeat: func(parser, range) => func(lines, [i, j]) {
    res := [];

    min := range:Front();
    max := null;

    if (range:Length() > 1u64) {
      max = range[1u64];
      assert range:Length() == 2u64;
    }

    count := 0u64;

    for {
      output := parser(lines, [i, j]);

      if (output:Kind() == 'null') {
        break;
      }

      [value, ijNext] := output;

      // TODO: Don't impose {data, pos} format
      res ++= [{data: value, pos: [[i, j], ijNext]}];
      [i, j] = ijNext;
      count++;

      // TODO: Short-circuit boolean operators
      if (max:Kind() != 'null') {
        if (count == max) {
          break;
        }
      }
    }

    if (count < min) {
      return null;
    }

    return [res, [i, j]];
  },

  Optional: func(parser) => parse.Repeat(parser, [0u64, 1u64]),
  Many: func(parser) => parse.Repeat(parser, [0u64, null]),

  Select: func(parsers) => func(lines, [i, j]) {
    for (parser of parsers) {
      output := parser(lines, [i, j]);

      if (output:Kind() != 'null') {
        return output;
      }
    }

    return null;
  },

  Exact: func(str) => switch {
    (str:Length() == 1u64) => ExactChar(str);

    true => func(lines, [i, j]) {
      if (i >= lines:Length()) {
        return null;
      }

      line := lines[i];

      for (strPos := 0u64; strPos < str:Length(); strPos++) {
        if (j + strPos >= line:Length()) {
          return null;
        }

        if (line[j + strPos] != str[strPos]) {
          return null;
        }
      }

      return [str, [i, j + str:Length()]];
    };
  },

  DataPos: func(parser) => func(lines, [i, j]) {
    output := parser(lines, [i, j]);

    if (output:Kind() == 'null') {
      return null;
    }

    [data, ijNext] := output;

    return [{data, pos: [[i, j], ijNext]}, ijNext];
  },

  Complete: func(parser) => func(lines) {
    output := parser(lines, [0u64, 0u64]);

    if (output:Kind() == 'null') {
      return null;
    }

    [result, [i, j]] := output;

    if (
      (i == lines:Length() && j == 0u64) ||
      (i == lines:Length() - 1u64 && j == lines:Back():Length())
    ) {
      return result;
    }

    return null;
  },

  Transform: func(parser, transform) => func(lines, [i, j]) {
    output := parser(lines, [i, j]);

    if (output:Kind() == 'null') {
      return null;
    }

    output[0] = transform(output[0]);

    return output;
  },

  Char: func(lines, [i, j]) {
    if (i >= lines:Length()) {
      return null;
    }

    line := lines[i];

    if (j == line:Length()) {
      newline := '
';

      return [newline, [i + 1u64, 0u64]];
    }

    assert j < line:Length();

    return [line[j], [i, j + 1u64]];
  },

  Filter: func(parser, filter) => func(lines, [i, j]) {
    output := parser(lines, [i, j]);

    if (output:Kind() == 'null') {
      return null;
    }

    if (!filter(output[0])) {
      return null;
    }

    return output;
  },
};
