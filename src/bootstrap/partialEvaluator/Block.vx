import ./FunctionAndType.vx;
import ./Scope.vx;
import ./Statement.vx;

func IsHoist(statement) {
  // TODO: Short-circuit && would simplify this a lot
  if (statement[0] == 'expression') {
    if (statement[1][0] == 'func') {
      return true;
    }
  }

  return false;
};

return func(scope, [type, statements, pos]) {
  assert type == 'block'; // TODO: Destructure exact matches using literals

  scope = Scope.push(scope);
  newStatements := [];
  hoists := {};

  for (statement of statements) {
    if (IsHoist(statement)) {
      fn := statement[1];
      assert fn[1].name[0] == 'identifier';
      name := fn[1].name[1];
      fn = FunctionAndType(scope, fn);
      hoists[name] := fn.expression;
      scope = Scope.add(scope, name, fn.type);
    }
  }

  reachable := true;

  for (statement of statements) {
    isHoist := IsHoist(statement);

    if (!isHoist) {
      {scope, statement} = Statement(scope, statement);
    } else {
      name := statement[1][1].name[1];

      statement = [
        'expression',
        hoists[name],
        statement[2],
      ];
    }

    if (reachable) {
      if (!(statement in #[null])) {
        newStatements ++= [statement];

        if (statement[0] in #['break', 'continue', 'return']) {
          reachable = false;
        }
      }
    } else if (isHoist) {
      newStatements ++= [statement];
    }
  }

  scope = Scope.pop(scope);

  return {scope, block: [type, newStatements, pos]};
};
